{"id":"d6db9af5525292f84a1401804b5eb907","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"contracts/Storage.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract Storage {\n    uint256 public storedNumber;\n\n    constructor(uint256 _initialNumber) {\n        storedNumber = _initialNumber;\n    }\n\n    function setNumber(uint256 _newNumber) public {\n        storedNumber = _newNumber;\n    }\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}},"evmVersion":"istanbul"}},"output":{"errors":[],"version":"0.8.28","long_version":"0.8.28+commit.7893614a.Linux.g++","revive_version":"0.1.0-dev.6+commit..llvm-18.1.8","sources":{"contracts/Storage.sol":{"id":0,"ast":{"absolutePath":"contracts/Storage.sol","exportedSymbols":{"Storage":[24]},"id":25,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"31:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Storage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":24,"linearizedBaseContracts":[24],"name":"Storage","nameLocation":"66:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"09ce9ccb","id":3,"mutability":"mutable","name":"storedNumber","nameLocation":"95:12:0","nodeType":"VariableDeclaration","scope":24,"src":"80:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint256","nodeType":"ElementaryTypeName","src":"80:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"body":{"id":12,"nodeType":"Block","src":"150:46:0","statements":[{"expression":{"id":10,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8,"name":"storedNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"160:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9,"name":"_initialNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"175:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"160:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":11,"nodeType":"ExpressionStatement","src":"160:29:0"}]},"id":13,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"_initialNumber","nameLocation":"134:14:0","nodeType":"VariableDeclaration","scope":13,"src":"126:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"126:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"125:24:0"},"returnParameters":{"id":7,"nodeType":"ParameterList","parameters":[],"src":"150:0:0"},"scope":24,"src":"114:82:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":22,"nodeType":"Block","src":"248:42:0","statements":[{"expression":{"id":20,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":18,"name":"storedNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"258:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":19,"name":"_newNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"273:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"258:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":21,"nodeType":"ExpressionStatement","src":"258:25:0"}]},"functionSelector":"3fb5c1cb","id":23,"implemented":true,"kind":"function","modifiers":[],"name":"setNumber","nameLocation":"211:9:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"_newNumber","nameLocation":"229:10:0","nodeType":"VariableDeclaration","scope":23,"src":"221:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"220:20:0"},"returnParameters":{"id":17,"nodeType":"ParameterList","parameters":[],"src":"248:0:0"},"scope":24,"src":"202:88:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":25,"src":"57:235:0","usedErrors":[],"usedEvents":[]}],"src":"31:261:0"}}},"contracts":{"contracts/Storage.sol":{"Storage":{"abi":[{"inputs":[{"internalType":"uint256","name":"_initialNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"_newNumber","type":"uint256"}],"name":"setNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"storedNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.6+commit..llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Storage.sol\":\"Storage\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Storage.sol\":{\"keccak256\":\"0xd13a7536074cf1e68b8031244bbaf34c730e5eb81b3fac7bb4b2fca569ecbaff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3647996a518bbd04efd19e9d36808c31bdb8f8c0310d7c76d7ee23f580870be3\",\"dweb:/ipfs/QmYMbCcWHxznEpXJ4kSQEfHZqGH1DEmRpP6Z9XHYGK4Tbt\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Linux.g++"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 0/66624 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 812\n// Code size = 2555 bytes\n\n      : @0 (gas: 4)\n     0: a2 = a0\n     2: a3 = a0 >> 16\n     5: a0 = 0x0\n     7: jump @7 if a3 != 0\n      : @1 (gas: 2)\n    10: a3 = 0x10000\n    15: jump @7 if a3 <u a1\n      : @2 (gas: 4)\n    18: i64 a1 = a1 + a2\n    21: a0 = a1 + 0x1f\n    24: a0 = a0 & 0xffffffe0\n    27: jump @4 if a0 <=u 65536\n      : @3 (gas: 2)\n    33: a0 = 0x0\n    35: ret\n      : @4 (gas: 2)\n    37: a1 = i32 [0x20000]\n    42: jump @6 if a1 >=u a0\n      : @5 (gas: 5)\n    45: u32 [0x20000] = a0\n    50: a1 = a0\n    52: a0 = 0x20020\n    57: i64 a0 = a0 + a1\n    60: ret\n      : @6 (gas: 3)\n    62: a0 = 0x20020\n    67: i64 a0 = a0 + a1\n    70: ret\n      : @7 (gas: 1)\n    72: ret\n      : @8 (gas: 1)\n    74: jump @11 if a2 == 0\n      : @9 (gas: 3)\n    77: i64 a2 = a2 + a0\n    80: a3 = a0\n    82: fallthrough\n      : @10 (gas: 6)\n    83: a4 = u8 [a1]\n    85: i64 a1 = i64 a1 + 0x1\n    88: i64 a5 = i64 a3 + 0x1\n    91: u8 [a3] = a4\n    93: a3 = a5\n    95: jump @10 if a5 != a2\n      : @11 (gas: 1)\n    98: ret\n      : @12 (gas: 10)\n   100: i64 sp = i64 sp - i64 32\n   103: u64 [sp + 24] = ra\n   106: u64 [sp + 16] = s0\n   109: u64 [sp + 8] = s1\n   112: i64 s0 = i64 sp + 0x20\n   115: sp = sp & 0xffffffe0\n   118: s1 = a0 & 0x1\n   121: a0 = 0x0\n   123: a1 = 0x0\n   125: ra = 2, jump @0\n      : @13 [@dyn 1] (gas: 7)\n   129: u64 [0x20010] = a0\n   134: u32 [sp + 0] = 1024\n   138: a0 = 0x30020\n   143: a0 = a0 + 0x0\n   145: a1 = sp + 0x0\n   147: ecalli 1 // 'input'\n   149: fallthrough\n      : @14 (gas: 6)\n   150: a0 = u32 [sp]\n   152: u64 [0x30438] = 0\n   157: u64 [0x30430] = 0\n   162: u64 [0x30428] = 0\n   167: u64 [0x30420] = a0\n   172: jump @16 if s1 == 0\n      : @15 (gas: 1)\n   175: ra = 4, jump @17\n      : @16 [@dyn 2] (gas: 1)\n   179: ra = 6, jump @56\n      : @17 [@dyn 3] (gas: 10)\n   184: i64 sp = i64 sp - i64 320\n   188: u64 [sp + 312] = ra\n   192: u64 [sp + 304] = s0\n   196: u64 [sp + 296] = s1\n   200: i64 s0 = i64 sp + 0x140\n   204: sp = sp & 0xffffffe0\n   207: s1 = sp\n   209: a0 = 0x40\n   212: a1 = 0x20\n   215: ra = 8, jump @0\n      : @18 [@dyn 4] (gas: 1)\n   220: jump @35 if a0 == 0\n      : @19 (gas: 18)\n   224: a1 = 0x20010\n   229: u64 [0x20060] = 0\n   234: u64 [0x20058] = 0\n   239: u64 [0x20050] = 0\n   244: a0 = 0x8000000000000000\n   254: u64 [s1 + 112] = a1\n   257: u64 [0x20068] = a0\n   262: i64 a0 = i64 sp - i64 32\n   265: a0 = a0 & 0xffffffe0\n   268: u64 [s1 + 120] = a0\n   271: sp = a0\n   273: u64 [a0 + 24] = 0\n   276: u64 [a0 + 16] = 0\n   279: u64 [a0 + 8] = 0\n   282: u64 [a0 + 0] = 0\n   284: a0 = a0 + 0x0\n   286: ecalli 5 // 'value_transferred'\n   288: fallthrough\n      : @20 (gas: 9)\n   289: a3 = u64 [s1 + 120]\n   292: a0 = u64 [a3 + 16]\n   295: a1 = u64 [a3 + 24]\n   298: a2 = u64 [a3 + 8]\n   301: a3 = u64 [a3]\n   303: a1 = a1 | a2\n   306: a0 = a0 | a3\n   309: a0 = a0 | a1\n   312: jump @33 if a0 != 0\n      : @21 (gas: 11)\n   316: a1 = u64 [0x30438]\n   321: u64 [s1 + 120] = a1\n   324: a1 = u64 [0x30430]\n   329: u64 [s1 + 104] = a1\n   332: a1 = u64 [0x30428]\n   337: u64 [s1 + 96] = a1\n   340: a0 = u64 [0x30420]\n   345: u64 [s1 + 88] = a0\n   348: a0 = 0x40\n   351: a1 = 0x20\n   354: ra = 10, jump @0\n      : @22 [@dyn 5] (gas: 1)\n   359: jump @35 if a0 == 0\n      : @23 (gas: 46)\n   363: a3 = u64 [s1 + 112]\n   366: a0 = u64 [a3 + 64]\n   369: a1 = u64 [a3 + 72]\n   372: a2 = u64 [a3 + 80]\n   375: a3 = u64 [a3 + 88]\n   378: t0 = reverse a0\n   380: t2 = reverse a1\n   382: a4 = reverse a2\n   384: t1 = reverse a3\n   386: a1 = u64 [s1 + 88]\n   389: i64 a0 = i64 a1 + 0x1f\n   392: a1 = a0 <u a1\n   395: a3 = u64 [s1 + 96]\n   398: i64 a2 = a3 + a1\n   401: a3 = a2 <u a3\n   404: a3 = a1 if a1 == 0\n   407: a5 = u64 [s1 + 104]\n   410: i64 a3 = a3 + a5\n   413: a0 = a0 & 0xffffffe0\n   416: i64 a0 = a0 + t1\n   419: u64 [s1 + 72] = a0\n   422: ra = a0 <u t1\n   425: i64 a2 = a2 + a4\n   428: i64 a1 = a2 + ra\n   431: a2 = a1 ^ a4\n   434: u64 [s1 + 80] = a4\n   437: a0 = a1 <u a4\n   440: a0 = ra if a2 == 0\n   443: a4 = a3 <u a5\n   446: i64 a3 = a3 + t2\n   449: a2 = u64 [s1 + 120]\n   452: i64 a2 = a2 + t0\n   455: i64 a4 = a4 + a2\n   458: a2 = a3 <u t2\n   461: i64 a4 = a4 + a2\n   464: i64 a5 = a3 + a0\n   467: a2 = a5 <u a3\n   470: i64 a4 = a4 + a2\n   473: a3 = a4 >u 0x0\n   475: a2 = a5 >u 0x0\n   477: a2 = a3 if a4 != 0\n   480: ra = a5 | a4\n   483: u64 [s1 + 64] = a1\n   486: a3 = a1 >u 0x0\n   488: a3 = a2 if ra != 0\n   491: jump @36 if a3 != 0\n      : @24 (gas: 8)\n   495: a1 = a5 <u t2\n   498: a2 = a4 ^ t0\n   501: a3 = a4 <u t0\n   504: a3 = a1 if a2 == 0\n   507: a1 = a5 ^ t2\n   510: a1 = a1 | a2\n   513: a0 = a3 if a1 != 0\n   516: jump @36 if a0 != 0\n      : @25 (gas: 8)\n   520: u64 [s1 + 24] = a4\n   523: u64 [s1 + 32] = a5\n   526: u64 [s1 + 40] = t0\n   529: u64 [s1 + 48] = t2\n   532: u64 [s1 + 56] = t1\n   535: a0 = 0x40\n   538: a1 = 0x20\n   541: ra = 12, jump @0\n      : @26 [@dyn 6] (gas: 1)\n   546: jump @35 if a0 == 0\n      : @27 (gas: 25)\n   550: a0 = u64 [s1 + 24]\n   553: a0 = reverse a0\n   555: a1 = u64 [s1 + 32]\n   558: a1 = reverse a1\n   560: a2 = u64 [s1 + 64]\n   563: a2 = reverse a2\n   565: a3 = u64 [s1 + 72]\n   568: a3 = reverse a3\n   570: a4 = u64 [s1 + 112]\n   573: u64 [a4 + 88] = a3\n   576: u64 [a4 + 80] = a2\n   579: u64 [a4 + 72] = a1\n   582: t0 = u64 [s1 + 56]\n   585: a3 = u64 [s1 + 48]\n   588: a1 = t0 | a3\n   591: a2 = u64 [s1 + 40]\n   594: a5 = u64 [s1 + 80]\n   597: a2 = a2 | a5\n   600: a1 = a1 | a2\n   603: a1 = a1 >>64 32\n   606: a2 = a2 | a3\n   609: a2 = a2 <<64 32\n   612: a1 = a1 | a2\n   615: u64 [a4 + 64] = a0\n   618: jump @35 if a1 != 0\n      : @28 (gas: 12)\n   622: a2 = u64 [s1 + 104]\n   625: a4 = u64 [s1 + 88]\n   628: a0 = a4 | a2\n   631: a1 = u64 [s1 + 120]\n   634: a3 = u64 [s1 + 96]\n   637: a1 = a1 | a3\n   640: a0 = a0 | a1\n   643: a0 = a0 >>64 32\n   646: a1 = a1 | a2\n   649: a1 = a1 <<64 32\n   652: a0 = a0 | a1\n   655: jump @35 if a0 != 0\n      : @29 (gas: 5)\n   658: a0 = t0 + 0x0\n   660: a1 = a4 + 0x0\n   662: u64 [s1 + 80] = a0\n   665: u64 [s1 + 72] = a1\n   668: ra = 14, jump @0\n      : @30 [@dyn 7] (gas: 1)\n   673: jump @35 if a0 == 0\n      : @31 (gas: 7)\n   676: a0 = u64 [s1 + 112]\n   679: a1 = u64 [s1 + 80]\n   682: i64 a0 = a0 + a1\n   685: a1 = 0x30020\n   690: u64 [s1 + 64] = a0\n   693: a2 = u64 [s1 + 72]\n   696: ra = 16, jump @8\n      : @32 [@dyn 8] (gas: 14)\n   701: a2 = u64 [s1 + 96]\n   704: a0 = a2 >u 0x0\n   706: a1 = u64 [s1 + 88]\n   709: a1 = a1 <u 0x20\n   712: a1 = a1 ^ 0x1\n   715: a1 = a0 if a2 != 0\n   718: a4 = u64 [s1 + 104]\n   721: a0 = a4 >u 0x0\n   723: a3 = u64 [s1 + 120]\n   726: a2 = a3 >u 0x0\n   728: a2 = a0 if a3 == 0\n   731: a0 = a4 | a3\n   734: a2 = a1 if a0 == 0\n   737: jump @43 if a2 != 0\n      : @33 (gas: 3)\n   740: a0 = 0x0\n   742: a1 = 0x0\n   744: ra = 18, jump @0\n      : @34 [@dyn 9] (gas: 1)\n   749: jump @55 if a0 != 0\n      : @35 (gas: 1)\n   753: trap\n      : @36 (gas: 3)\n   754: a1 = 0x20\n   757: a0 = 0x0\n   759: ra = 20, jump @0\n      : @37 [@dyn 10] (gas: 1)\n   764: jump @35 if a0 == 0\n      : @38 (gas: 8)\n   767: a1 = u64 [s1 + 112]\n   770: u64 [a1 + 24] = 0\n   773: u64 [a1 + 16] = 0\n   776: u64 [a1 + 8] = 0\n   779: u64 [a1 + 0] = 1903904846\n   785: a0 = 0x4\n   788: a1 = 0x20\n   791: ra = 22, jump @0\n      : @39 [@dyn 11] (gas: 1)\n   796: jump @35 if a0 == 0\n      : @40 (gas: 12)\n   799: a1 = u64 [s1 + 112]\n   802: u32 [a1 + 32] = 1090519040\n   809: u32 [a1 + 28] = 0\n   812: u32 [a1 + 24] = 0\n   815: u32 [a1 + 20] = 0\n   818: u32 [a1 + 16] = 0\n   821: u32 [a1 + 12] = 0\n   824: u32 [a1 + 8] = 0\n   827: u32 [a1 + 4] = 0\n   830: a1 = 0x24\n   833: a0 = 0x0\n   835: ra = 24, jump @0\n      : @41 [@dyn 12] (gas: 1)\n   840: jump @35 if a0 == 0\n      : @42 (gas: 5)\n   843: a1 = i32 [s1 + 112]\n   846: a0 = 0x1\n   849: a2 = 0x24\n   852: ecalli 2 // 'seal_return'\n   854: fallthrough\n      : @43 (gas: 3)\n   855: a1 = 0x20\n   858: a0 = u64 [s1 + 80]\n   861: ra = 26, jump @0\n      : @44 [@dyn 13] (gas: 1)\n   866: jump @35 if a0 == 0\n      : @45 (gas: 136)\n   869: t2 = u64 [s1 + 64]\n   872: a0 = u8 [t2 + 1]\n   875: a1 = u8 [t2]\n   877: a2 = u8 [t2 + 2]\n   880: a3 = u8 [t2 + 3]\n   883: a0 = a0 <<64 8\n   886: a0 = a0 | a1\n   889: a2 = a2 <<64 16\n   892: a3 = a3 <<64 24\n   895: a2 = a2 | a3\n   898: a0 = a0 | a2\n   901: a1 = u8 [t2 + 5]\n   904: a2 = u8 [t2 + 4]\n   907: a3 = u8 [t2 + 6]\n   910: a4 = u8 [t2 + 7]\n   913: a1 = a1 <<64 8\n   916: a1 = a1 | a2\n   919: a3 = a3 <<64 16\n   922: a4 = a4 <<64 24\n   925: a3 = a3 | a4\n   928: a1 = a1 | a3\n   931: a1 = a1 <<64 32\n   934: t0 = a1 | a0\n   937: a1 = u8 [t2 + 9]\n   940: a2 = u8 [t2 + 8]\n   943: a3 = u8 [t2 + 10]\n   946: a4 = u8 [t2 + 11]\n   949: a1 = a1 <<64 8\n   952: a1 = a1 | a2\n   955: a3 = a3 <<64 16\n   958: a4 = a4 <<64 24\n   961: a3 = a3 | a4\n   964: a1 = a1 | a3\n   967: a2 = u8 [t2 + 13]\n   970: a3 = u8 [t2 + 12]\n   973: a4 = u8 [t2 + 14]\n   976: a5 = u8 [t2 + 15]\n   979: a2 = a2 <<64 8\n   982: a2 = a2 | a3\n   985: a4 = a4 <<64 16\n   988: a5 = a5 <<64 24\n   991: a4 = a4 | a5\n   994: a2 = a2 | a4\n   997: a2 = a2 <<64 32\n  1000: t1 = a2 | a1\n  1003: a2 = u8 [t2 + 17]\n  1006: a3 = u8 [t2 + 16]\n  1009: a4 = u8 [t2 + 18]\n  1012: a5 = u8 [t2 + 19]\n  1015: a2 = a2 <<64 8\n  1018: a2 = a2 | a3\n  1021: a4 = a4 <<64 16\n  1024: a5 = a5 <<64 24\n  1027: a4 = a4 | a5\n  1030: a2 = a2 | a4\n  1033: a3 = u8 [t2 + 21]\n  1036: a4 = u8 [t2 + 20]\n  1039: a5 = u8 [t2 + 22]\n  1042: a0 = u8 [t2 + 23]\n  1045: a3 = a3 <<64 8\n  1048: a3 = a3 | a4\n  1051: a5 = a5 <<64 16\n  1054: a0 = a0 <<64 24\n  1057: a0 = a0 | a5\n  1060: a0 = a0 | a3\n  1063: a0 = a0 <<64 32\n  1066: a2 = a2 | a0\n  1069: a0 = u8 [t2 + 25]\n  1072: a3 = u8 [t2 + 24]\n  1075: a4 = u8 [t2 + 26]\n  1078: a5 = u8 [t2 + 27]\n  1081: a0 = a0 <<64 8\n  1084: a0 = a0 | a3\n  1087: a4 = a4 <<64 16\n  1090: a5 = a5 <<64 24\n  1093: a4 = a4 | a5\n  1096: a0 = a0 | a4\n  1099: a3 = u8 [t2 + 29]\n  1102: a4 = u8 [t2 + 28]\n  1105: a5 = u8 [t2 + 30]\n  1108: a1 = u8 [t2 + 31]\n  1111: a3 = a3 <<64 8\n  1114: a3 = a3 | a4\n  1117: a5 = a5 <<64 16\n  1120: a1 = a1 <<64 24\n  1123: a1 = a1 | a5\n  1126: a1 = a1 | a3\n  1129: a1 = a1 <<64 32\n  1132: a0 = a0 | a1\n  1135: a0 = reverse a0\n  1137: u64 [s1 + 120] = a0\n  1140: a0 = reverse a2\n  1142: u64 [s1 + 104] = a0\n  1145: a0 = reverse t1\n  1147: u64 [s1 + 96] = a0\n  1150: a0 = reverse t0\n  1152: u64 [s1 + 88] = a0\n  1155: u64 [s1 + 248] = 0\n  1159: u64 [s1 + 240] = 0\n  1163: u64 [s1 + 232] = 0\n  1167: u64 [s1 + 224] = 0\n  1171: u64 [s1 + 216] = 0\n  1175: u64 [s1 + 208] = 0\n  1179: u64 [s1 + 200] = 0\n  1183: u64 [s1 + 192] = 0\n  1187: u64 [s1 + 176] = 0\n  1191: u64 [s1 + 184] = 0\n  1195: u64 [s1 + 168] = 0\n  1199: u64 [s1 + 160] = 256\n  1205: a1 = s1 + 0xe0\n  1209: a3 = s1 + 0xc0\n  1213: a4 = s1 + 0xa0\n  1217: a2 = 0xffffffff\n  1220: a0 = 0x0\n  1222: ecalli 0 // 'get_storage'\n  1223: u64 [s1 + 280] = 0\n  1227: u64 [s1 + 272] = 0\n  1231: u64 [s1 + 264] = 0\n  1235: u64 [s1 + 256] = 0\n  1239: a0 = u64 [s1 + 88]\n  1242: u64 [s1 + 152] = a0\n  1246: a0 = u64 [s1 + 96]\n  1249: u64 [s1 + 144] = a0\n  1253: a0 = u64 [s1 + 104]\n  1256: u64 [s1 + 136] = a0\n  1260: a0 = u64 [s1 + 120]\n  1263: u64 [s1 + 128] = a0\n  1267: a1 = s1 + 0x100\n  1271: a3 = s1 + 0x80\n  1275: a2 = 0xffffffff\n  1278: a4 = 0x20\n  1281: a0 = 0x0\n  1283: ecalli 4 // 'set_storage'\n  1285: a0 = 0x40\n  1288: a1 = 0x20\n  1291: ra = 28, jump @0\n      : @46 [@dyn 14] (gas: 1)\n  1296: jump @35 if a0 == 0\n      : @47 (gas: 17)\n  1300: a3 = u64 [s1 + 112]\n  1303: a0 = u64 [a3 + 72]\n  1306: a1 = u64 [a3 + 88]\n  1309: a2 = u64 [a3 + 64]\n  1312: a3 = u64 [a3 + 80]\n  1315: a4 = reverse a0\n  1317: a0 = reverse a1\n  1319: a1 = reverse a2\n  1321: a2 = reverse a3\n  1323: a1 = a1 | a2\n  1326: a2 = a0 | a4\n  1329: a2 = a2 | a1\n  1332: a2 = a2 >>64 32\n  1335: a1 = a1 | a4\n  1338: a1 = a1 <<64 32\n  1341: a1 = a1 | a2\n  1344: jump @35 if a1 != 0\n      : @48 (gas: 3)\n  1348: a0 = a0 + 0x0\n  1350: u64 [s1 + 120] = a0\n  1353: ra = 30, jump @0\n      : @49 [@dyn 15] (gas: 1)\n  1358: jump @35 if a0 == 0\n      : @50 (gas: 2)\n  1362: a1 = i32 [0x20018]\n  1367: jump @52 if a1 == 0\n      : @51 (gas: 4)\n  1370: a0 = 0x30440\n  1375: a0 = a0 + 0x0\n  1377: ecalli 3 // 'set_immutable_data'\n  1379: fallthrough\n      : @52 (gas: 3)\n  1380: a0 = u64 [s1 + 120]\n  1383: a1 = 0x0\n  1385: ra = 32, jump @0\n      : @53 [@dyn 16] (gas: 1)\n  1390: jump @35 if a0 == 0\n      : @54 (gas: 7)\n  1394: a0 = u64 [s1 + 112]\n  1397: a1 = u64 [s1 + 120]\n  1400: a1 = a1 + a0\n  1403: a0 = 0x0\n  1405: a2 = 0x0\n  1407: ecalli 2 // 'seal_return'\n  1409: fallthrough\n      : @55 (gas: 6)\n  1410: a1 = i32 [s1 + 112]\n  1413: a0 = 0x1\n  1416: a2 = 0x0\n  1418: ra = 0x22\n  1421: ecalli 2 // 'seal_return'\n  1423: fallthrough\n      : @56 [@dyn 17] (gas: 9)\n  1424: i64 sp = i64 sp - i64 288\n  1428: u64 [sp + 280] = ra\n  1432: u64 [sp + 272] = s0\n  1436: u64 [sp + 264] = s1\n  1440: i64 s0 = i64 sp + 0x120\n  1444: sp = sp & 0xffffffe0\n  1447: a0 = 0x40\n  1450: a1 = 0x20\n  1453: ra = 36, jump @0\n      : @57 [@dyn 18] (gas: 1)\n  1458: jump @59 if a0 != 0\n      : @58 (gas: 1)\n  1461: trap\n      : @59 (gas: 21)\n  1462: t0 = 0x20010\n  1467: u64 [0x20060] = 0\n  1472: u64 [0x20058] = 0\n  1477: u64 [0x20050] = 0\n  1482: a0 = 0x8000000000000000\n  1492: s1 = 0x30420\n  1497: a1 = u64 [0x30428]\n  1502: a2 = u64 [0x30420]\n  1507: a3 = u64 [0x30430]\n  1512: a4 = u64 [0x30438]\n  1517: a5 = a1 >u 0x0\n  1519: a2 = a2 <u 0x4\n  1522: a2 = a2 ^ 0x1\n  1525: a2 = a5 if a1 != 0\n  1528: a1 = a4 >u 0x0\n  1530: a5 = a3 >u 0x0\n  1532: a5 = a1 if a4 != 0\n  1535: a3 = a3 | a4\n  1538: a2 = a5 if a3 != 0\n  1541: u64 [0x20068] = a0\n  1546: jump @71 if a2 == 0\n      : @60 (gas: 5)\n  1550: a2 = 0x30020\n  1555: a0 = u64 [0x30020]\n  1560: a0 = reverse a0\n  1562: a0 = a0 >>a64 32\n  1565: jump @72 if a0 == 164535499\n      : @61 (gas: 1)\n  1573: jump @71 if a0 != 1068876235\n      : @62 (gas: 9)\n  1581: u64 [sp + 48] = a2\n  1584: u64 [sp + 56] = t0\n  1587: u64 [sp + 88] = 0\n  1590: u64 [sp + 80] = 0\n  1593: u64 [sp + 72] = 0\n  1596: u64 [sp + 64] = 0\n  1599: a0 = sp + 0x40\n  1602: ecalli 5 // 'value_transferred'\n  1604: fallthrough\n      : @63 (gas: 8)\n  1605: a0 = u64 [sp + 80]\n  1608: a1 = u64 [sp + 88]\n  1611: a2 = u64 [sp + 72]\n  1614: a3 = u64 [sp + 64]\n  1617: a1 = a1 | a2\n  1620: a0 = a0 | a3\n  1623: a0 = a0 | a1\n  1626: jump @75 if a0 != 0\n      : @64 (gas: 27)\n  1630: a0 = u64 [0x30420]\n  1635: a1 = u64 [0x30438]\n  1640: a2 = u64 [0x30428]\n  1645: a3 = u64 [0x30430]\n  1650: i64 a4 = i64 a0 - i64 4\n  1653: a0 = a4 <u a0\n  1656: i64 a5 = a2 + a0\n  1659: i64 a5 = i64 a5 - i64 1\n  1662: s1 = a5 ^ a2\n  1665: a2 = a5 <u a2\n  1668: a2 = a0 if s1 == 0\n  1671: i64 a0 = i64 a3 - i64 1\n  1674: i64 a2 = a2 + a0\n  1677: a0 = a2 <u a0\n  1680: a3 = a3 <u 0x1\n  1683: i64 a1 = i64 a1 - i64 a3\n  1686: i64 a0 = a0 + a1\n  1689: a1 = a0 >s 0\n  1691: a3 = a2 >u 0x0\n  1693: a3 = a1 if a0 != 0\n  1696: a0 = a0 | a2\n  1699: a1 = a5 >u 0x0\n  1701: a2 = a4 <u 0x20\n  1704: a2 = a2 ^ 0x1\n  1707: a2 = a1 if a5 != 0\n  1710: a2 = a3 if a0 != 0\n  1713: jump @75 if a2 == 0\n      : @65 (gas: 50)\n  1717: a3 = u64 [sp + 48]\n  1720: a0 = u64 [a3 + 28]\n  1723: a1 = u64 [a3 + 20]\n  1726: a2 = u64 [a3 + 12]\n  1729: a3 = u64 [a3 + 4]\n  1732: a0 = reverse a0\n  1734: u64 [sp + 48] = a0\n  1737: a0 = reverse a1\n  1739: u64 [sp + 40] = a0\n  1742: a0 = reverse a2\n  1744: u64 [sp + 32] = a0\n  1747: s1 = reverse a3\n  1749: u64 [sp + 216] = 0\n  1753: u64 [sp + 208] = 0\n  1757: u64 [sp + 200] = 0\n  1761: u64 [sp + 192] = 0\n  1765: u64 [sp + 184] = 0\n  1769: u64 [sp + 176] = 0\n  1773: u64 [sp + 168] = 0\n  1777: u64 [sp + 160] = 0\n  1781: u64 [sp + 144] = 0\n  1785: u64 [sp + 152] = 0\n  1789: u64 [sp + 136] = 0\n  1793: u64 [sp + 128] = 256\n  1799: a1 = sp + 0xc0\n  1803: a3 = sp + 0xa0\n  1807: a4 = sp + 0x80\n  1811: a2 = 0xffffffff\n  1814: a0 = 0x0\n  1816: ecalli 0 // 'get_storage'\n  1817: u64 [sp + 248] = 0\n  1821: u64 [sp + 240] = 0\n  1825: u64 [sp + 232] = 0\n  1829: u64 [sp + 224] = 0\n  1833: u64 [sp + 120] = s1\n  1836: a0 = u64 [sp + 32]\n  1839: u64 [sp + 112] = a0\n  1842: a0 = u64 [sp + 40]\n  1845: u64 [sp + 104] = a0\n  1848: a0 = u64 [sp + 48]\n  1851: u64 [sp + 96] = a0\n  1854: a1 = sp + 0xe0\n  1858: a3 = sp + 0x60\n  1861: a2 = 0xffffffff\n  1864: a4 = 0x20\n  1867: a0 = 0x0\n  1869: ecalli 4 // 'set_storage'\n  1871: a0 = 0x40\n  1874: a1 = 0x20\n  1877: ra = 38, jump @0\n      : @66 [@dyn 19] (gas: 1)\n  1882: jump @58 if a0 == 0\n      : @67 (gas: 16)\n  1886: a3 = u64 [sp + 56]\n  1889: a0 = u64 [a3 + 72]\n  1892: a1 = u64 [a3 + 88]\n  1895: a2 = u64 [a3 + 64]\n  1898: a3 = u64 [a3 + 80]\n  1901: a4 = reverse a0\n  1903: a0 = reverse a1\n  1905: a1 = a0 | a4\n  1908: a2 = a2 | a3\n  1911: a2 = reverse a2\n  1913: a1 = a1 | a2\n  1916: a1 = a1 >>64 32\n  1919: a2 = a2 | a4\n  1922: a2 = a2 <<64 32\n  1925: a1 = a1 | a2\n  1928: jump @58 if a1 != 0\n      : @68 (gas: 3)\n  1932: s1 = a0 + 0x0\n  1934: a0 = s1\n  1936: ra = 40, jump @0\n      : @69 [@dyn 20] (gas: 1)\n  1941: jump @58 if a0 == 0\n      : @70 (gas: 7)\n  1945: a0 = u64 [sp + 56]\n  1948: a1 = a0 + s1\n  1951: a0 = 0x0\n  1953: a2 = 0x0\n  1955: ecalli 2 // 'seal_return'\n  1957: ra = 0x2a\n  1960: jump @86\n      : @71 (gas: 1)\n  1963: ra = 42, jump @86\n      : @72 [@dyn 21] (gas: 8)\n  1968: u64 [sp + 56] = t0\n  1971: u64 [sp + 184] = 0\n  1975: u64 [sp + 176] = 0\n  1979: u64 [sp + 168] = 0\n  1983: u64 [sp + 160] = 0\n  1987: a0 = sp + 0xa0\n  1991: ecalli 5 // 'value_transferred'\n  1993: fallthrough\n      : @73 (gas: 8)\n  1994: a0 = u64 [sp + 176]\n  1998: a1 = u64 [sp + 184]\n  2002: a2 = u64 [sp + 168]\n  2006: a3 = u64 [sp + 160]\n  2010: a1 = a1 | a2\n  2013: a0 = a0 | a3\n  2016: a0 = a0 | a1\n  2019: jump @75 if a0 != 0\n      : @74 (gas: 18)\n  2022: a0 = u64 [s1]\n  2024: a1 = u64 [s1 + 24]\n  2027: a2 = u64 [s1 + 8]\n  2030: a3 = u64 [s1 + 16]\n  2033: i64 a4 = i64 a0 - i64 4\n  2036: a0 = a4 <u a0\n  2039: i64 a4 = a2 + a0\n  2042: i64 a4 = i64 a4 - i64 1\n  2045: a5 = a4 ^ a2\n  2048: a2 = a4 <u a2\n  2051: a2 = a0 if a5 == 0\n  2054: i64 a0 = i64 a3 - i64 1\n  2057: i64 a2 = a2 + a0\n  2060: a0 = a2 <u a0\n  2063: a2 = a3 <u 0x1\n  2066: i64 a1 = i64 a1 - i64 a2\n  2069: i64 a0 = a0 + a1\n  2072: jump @78 if a0 >=s 0\n      : @75 (gas: 3)\n  2075: a0 = 0x0\n  2077: a1 = 0x0\n  2079: ra = 44, jump @0\n      : @76 [@dyn 22] (gas: 1)\n  2084: jump @58 if a0 == 0\n      : @77 (gas: 5)\n  2088: a1 = i32 [sp + 56]\n  2091: a0 = 0x1\n  2094: a2 = 0x0\n  2096: ecalli 2 // 'seal_return'\n  2098: fallthrough\n      : @78 (gas: 28)\n  2099: u64 [sp + 248] = 0\n  2103: u64 [sp + 240] = 0\n  2107: u64 [sp + 232] = 0\n  2111: u64 [sp + 224] = 0\n  2115: u64 [sp + 216] = 0\n  2119: u64 [sp + 208] = 0\n  2123: u64 [sp + 200] = 0\n  2127: u64 [sp + 192] = 0\n  2131: u64 [sp + 112] = 0\n  2134: u64 [sp + 120] = 0\n  2137: u64 [sp + 104] = 0\n  2140: u64 [sp + 96] = 256\n  2145: a1 = sp + 0xe0\n  2149: a3 = sp + 0xc0\n  2153: a4 = sp + 0x60\n  2156: a2 = 0xffffffff\n  2159: a0 = 0x0\n  2161: ecalli 0 // 'get_storage'\n  2162: a0 = u64 [sp + 216]\n  2166: u64 [sp + 32] = a0\n  2169: a0 = u64 [sp + 208]\n  2173: u64 [sp + 40] = a0\n  2176: a0 = u64 [sp + 200]\n  2180: u64 [sp + 48] = a0\n  2183: s1 = u64 [sp + 192]\n  2187: a0 = 0x40\n  2190: a1 = 0x20\n  2193: ra = 46, jump @0\n      : @79 [@dyn 23] (gas: 1)\n  2198: jump @58 if a0 == 0\n      : @80 (gas: 16)\n  2202: a3 = u64 [sp + 56]\n  2205: a0 = u64 [a3 + 72]\n  2208: a1 = u64 [a3 + 88]\n  2211: a2 = u64 [a3 + 64]\n  2214: a3 = u64 [a3 + 80]\n  2217: a4 = reverse a0\n  2219: a0 = reverse a1\n  2221: a1 = a0 | a4\n  2224: a2 = a2 | a3\n  2227: a2 = reverse a2\n  2229: a1 = a1 | a2\n  2232: a1 = a1 >>64 32\n  2235: a2 = a2 | a4\n  2238: a2 = a2 <<64 32\n  2241: a1 = a1 | a2\n  2244: jump @58 if a1 != 0\n      : @81 (gas: 5)\n  2248: u64 [sp + 24] = s1\n  2251: s1 = a0 + 0x0\n  2253: a1 = 0x20\n  2256: a0 = s1\n  2258: ra = 48, jump @0\n      : @82 [@dyn 24] (gas: 1)\n  2263: jump @58 if a0 == 0\n      : @83 (gas: 73)\n  2267: a0 = s1\n  2269: s1 = u64 [sp + 56]\n  2272: i64 s1 = s1 + a0\n  2275: a1 = u64 [sp + 32]\n  2278: a5 = reverse a1\n  2280: a1 = u64 [sp + 40]\n  2283: a1 = reverse a1\n  2285: a2 = u64 [sp + 48]\n  2288: a2 = reverse a2\n  2290: a3 = u64 [sp + 24]\n  2293: a3 = reverse a3\n  2295: u8 [s1 + 24] = a3\n  2298: a4 = a3 >>64 56\n  2301: u8 [s1 + 31] = a4\n  2304: a4 = a3 >>64 48\n  2307: u8 [s1 + 30] = a4\n  2310: a4 = a3 >>64 40\n  2313: u8 [s1 + 29] = a4\n  2316: a4 = a3 >>64 32\n  2319: u8 [s1 + 28] = a4\n  2322: a4 = a3 >>64 24\n  2325: u8 [s1 + 27] = a4\n  2328: a4 = a3 >>64 16\n  2331: u8 [s1 + 26] = a4\n  2334: a3 = a3 >>64 8\n  2337: u8 [s1 + 25] = a3\n  2340: u8 [s1 + 16] = a2\n  2343: a3 = a2 >>64 56\n  2346: u8 [s1 + 23] = a3\n  2349: a3 = a2 >>64 48\n  2352: u8 [s1 + 22] = a3\n  2355: a3 = a2 >>64 40\n  2358: u8 [s1 + 21] = a3\n  2361: a3 = a2 >>64 32\n  2364: u8 [s1 + 20] = a3\n  2367: a3 = a2 >>64 24\n  2370: u8 [s1 + 19] = a3\n  2373: a3 = a2 >>64 16\n  2376: u8 [s1 + 18] = a3\n  2379: a2 = a2 >>64 8\n  2382: u8 [s1 + 17] = a2\n  2385: u8 [s1 + 8] = a1\n  2388: a2 = a1 >>64 56\n  2391: u8 [s1 + 15] = a2\n  2394: a2 = a1 >>64 48\n  2397: u8 [s1 + 14] = a2\n  2400: a2 = a1 >>64 40\n  2403: u8 [s1 + 13] = a2\n  2406: a2 = a1 >>64 32\n  2409: u8 [s1 + 12] = a2\n  2412: a2 = a1 >>64 24\n  2415: u8 [s1 + 11] = a2\n  2418: a2 = a1 >>64 16\n  2421: u8 [s1 + 10] = a2\n  2424: a1 = a1 >>64 8\n  2427: u8 [s1 + 9] = a1\n  2430: u8 [s1] = a5\n  2432: a1 = a5 >>64 56\n  2435: u8 [s1 + 7] = a1\n  2438: a1 = a5 >>64 48\n  2441: u8 [s1 + 6] = a1\n  2444: a1 = a5 >>64 40\n  2447: u8 [s1 + 5] = a1\n  2450: a1 = a5 >>64 32\n  2453: u8 [s1 + 4] = a1\n  2456: a1 = a5 >>64 24\n  2459: u8 [s1 + 3] = a1\n  2462: a1 = a5 >>64 16\n  2465: u8 [s1 + 2] = a1\n  2468: a5 = a5 >>64 8\n  2471: u8 [s1 + 1] = a5\n  2474: a1 = 0x20\n  2477: ra = 50, jump @0\n      : @84 [@dyn 25] (gas: 1)\n  2482: jump @58 if a0 == 0\n      : @85 (gas: 6)\n  2486: a1 = s1 + 0x0\n  2488: a2 = 0x20\n  2491: a0 = 0x0\n  2493: ra = 0x34\n  2496: ecalli 2 // 'seal_return'\n  2498: fallthrough\n      : @86 [@dyn 26] (gas: 5)\n  2499: i64 sp = i64 sp - i64 8\n  2502: u64 [sp] = ra\n  2504: a0 = 0x0\n  2506: a1 = 0x0\n  2508: ra = 54, jump @0\n      : @87 [@dyn 27] (gas: 1)\n  2513: jump @89 if a0 != 0\n      : @88 (gas: 1)\n  2516: trap\n      : @89 (gas: 8)\n  2517: a1 = 0x20010\n  2522: a1 = a1 + 0x0\n  2524: a0 = 0x1\n  2527: a2 = 0x0\n  2529: ecalli 2 // 'seal_return'\n  2531: a0 = 0x0\n  2533: ra = 0x38\n  2536: jump @12\n      : @90 [export #0: 'call'] (gas: 2)\n  2539: a0 = 0x0\n  2541: ra = 56, jump @12\n      : @91 [@dyn 28] [export #1: 'deploy'] (gas: 2)\n  2546: a0 = 0x1\n  2549: ra = 58, jump @12\n      : @92 [@dyn 29] (gas: 1)\n  2554: trap\n","bytecode":{"object":"50564d00000a0c000000000000010700c14004c00040046206000000000b000000100000001b0000002d000000380000006765745f73746f72616765696e7075747365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e7366657272656405110289eb0463616c6c89f2066465706c6f79068b791d0289fb8100b300b800dc0067012202a102bd02ed02fc021c034803620310054e056e059005b2055a079507b00724089608d708b209c309d109f209fa0952790e7a1004070f0a41040a0000012f8a3965980802871f1277e03b370000010a040713000a080000022978141607000002527804072000026587071300040720000265870713001300070918657909527a110b8b68880168ac0110ab52ca1e9cf413006811e05a10185a15105a16086815201211e0127601040704080610028360071000020d0100040407200003027702184e01116317620338040362033004036203280403600720040307060706100409061006dd046811c0fe5a1038015a1530015a162801681540011211e0521604074004082006100829ff070715020408100002620360000262035800026203500002760700000000000000805a687060076800026817e01277e05a677852715d17185d17105d17085d0702774e05115b6a785ba7105ba8185ba9085baa0c98080ca7070c87070f07ac015f083804035a68785f083004035a68685f082804035a68605f072004035a675804074004082006100a9efe07078a015b6a705ba7405ba8485ba9505baa589d729d849d9b9da35b685868871f2487085b6a60658a0924a90a53880a5b6c6865ca0a1277e06537075a674824370065b9096509081cb8095a6b5024b80753900724ca0b654a0a5b6978652909659b0b244a09659b0b657a0c24ac09659b0b27ba27c954ba090cbc005a6840278a54090a0f0a0701244c081c2b09242b0a53980a1c4c080c9808548a070f07ee005a6b185a6c205a62285a64305a633804074004082006100ce3fd0707cf005b67189d775b68209d885b69409d995b6a489daa5b6b705aba585ab9505ab8485b62385b6a300ca2085b69285b6c500cc9090c98086a88200ca9096999200c98085ab7400f0887005b69685b6b580c9b075b68785b6a600ca8080c87076a77200c98086988200c87070f0762022702b85a67505a684806100e64fd0707505b67705b685065870704082000035a67405b694806101092fd5b696027975b68581b88201f88015497085b6b6827b75b6a7827a953a7090cab075378090f09760407040806101218fd0f07950200040820040706101409fd0707f55b68705d18185d18105d18085d084e487b71040704040820061016e9fc0707d55b68700d1820000000410d181c0d18180d18140d18100d180c0d18080d18040408240407061018bdfc0707a90168700407010409244e02110408205b675006101aa3fc07078f5b64400b47010b480b49020b4a036977080c870769991069aa180ca9090c97070b48050b49040b4a060b4b076988080c980869aa1069bb180cba0a0ca8086988200c78020b48090b49080b4a0a0b4b0b6988080c980869aa1069bb180cba0a0ca8080b490d0b4a0c0b4b0e0b4c0f6999080ca90969bb1069cc180ccb0b0cb9096999200c89030b49110b4a100b4b120b4c136999080ca90969bb1069cc180ccb0b0cb9090b4a150b4b140b4c160b471769aa080cba0a69cc106977180cc7070ca7076977200c79090b47190b4a180b4b1a0b4c1b6977080ca70769bb1069cc180ccb0b0cb7070b4a1d0b4b1c0b4c1e0b481f69aa080cba0a69cc106988180cc8080ca8086988200c87079d775a67789d975a67689d375a67609d275a67585d26f8005d26f0005d26e8005d26e0005d26d8005d26d0005d26c8005d26c0005d26b0005d26b8005d26a8005d26a00000010268e000026ac000026ba0000409ff04074e5d2618015d2610015d2608015d2600015b67585a6798005b67605a6790005b67685a6788005b67785a67800002680001026a80000409ff040b2004074e0404074004082006101cf5fa0707e1fd5b6a705ba7485ba8585ba9405baa509d7b9d879d989da90c98080cb7090c89096a99200cb8086988200c98080f08b1fd02775a677806101eb7fa0707a3fd0a0818000207080d040740040302774e03115b6778040806102097fa070783fd5b67705b6878087808040704094e021101687004070104090400224e02116811e0fe5a1018015a1510015a160801681520011211e004074004082006102453fa0f07040004021000026203600002620358000262035000027607000000000000008004062004035f082804035f092004035f0a3004035f0b380403278c1b99041f9901548c0927b827ac54b80c0cba0a54ac0960076800020709a10104092000035f072000039d776b77200747cb9cce0993010f47cbc1b53f86015a19305a12385d11585d11505d11485d11400217404e05115b17505b18585b19485b1a400c98080ca7070c87070f07c1015f072004035f083804035f092804035f0a300403687bfc247b0765790c68ccff1c9c06249c0953670968a7ff6579092479071baa0170a8086587073d78279a54780a0c970727c81bb9201f990154c809547a0907096a015b1a305ba71c5ba8145ba90c5baa049d775a17309d875a17289d975a17209da65d21d8005d21d0005d21c8005d21c0005d21b8005d21b0005d21a8005d21a0005d2190005d2198005d2188005d21800000010218c000021aa000021b80000409ff04074e5d21f8005d21f0005d21e8005d21e0005a16785b17205a17705b17285a17685b17305a17600218e000021a600409ff040b2004074e04040740040820061026abf807075bfe5b1a385ba7485ba8585ba9405baa509d7b9d870cb7080ca9099d990c98086a88200cb9096999200c98080f082dfe0276526706102870f8070720fe5b1738086708040704094e0204002a051b0206102a18025a12385d21b8005d21b0005d21a8005d21a0000217a0004e05115b17b0005b18b8005b19a8005b1aa0000c98080ca7070c87070f07385b675b68185b69085b6a10687bfc247b0765790b68bbff1c9b0c249b0953c70968a7ff6579092479071ba9017098086587072d071b0407040806102ce1f7070791fd01183804070104094e02115d21f8005d21f0005d21e8005d21e0005d21d8005d21d0005d21c8005d21c0005d11705d11785d11685d116000010218e000021ac000021b600409ff04074e5b17d8005a17205b17d0005a17285b17c8005a17305b16c00004074004082006102e6ff707071ffd5b1a385ba7485ba8585ba9405baa509d7b9d870cb7080ca9099d990c98086a88200cb9096999200c98080f08f1fc5a1618027604082052670610302ef70707defc52675b16386576065b18209d8c5b18289d885b19309d995b1a189daa106a186aab38106b1f6aab30106b1e6aab28106b1d6aab20106b1c6aab18106b1b6aab10106b1a6aaa08106a191069106a9a38106a176a9a30106a166a9a28106a156a9a20106a146a9a18106a136a9a10106a126a99081069111068086a893810690f6a893010690e6a892810690d6a892010690c6a891810690b6a891010690a6a8808106809106c6ac8381068076ac8301068066ac8281068056ac8201068046ac8181068036ac8101068026acc08106c0104082006103253f6070703fc026804092004070400344e02116811f85a100407040806103634f60f0704000408100002028804070104094e020407040038057cf6040706103877f604070106103a6ff600a58424092a24145248252da99424492a42846a218490081111919210218410404292925493a42411121212928448925425499224499224499224492a4989244912499224444a29254992244992449224499254129224242125494a495221a69024099290049224490a49d22424294992244992244992244992244992244992244992244992244992244992244992524a8988888888882022d2888844229188482a099124a94a9224514284849a4224a926a51111912464082104104208a12495244408252020499234499244082124499224492a29492249524a292222222222828848232292244924a9244492a49292245121922a0989888846442449499224499224a910498d88888848122292462291484224492a2949122985284929a5244992244992244992244992244992244949922449922444294d1532942a29240400"},"deployedBytecode":{"object":"50564d00000a0c000000000000010700c14004c00040046206000000000b000000100000001b0000002d000000380000006765745f73746f72616765696e7075747365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e7366657272656405110289eb0463616c6c89f2066465706c6f79068b791d0289fb8100b300b800dc0067012202a102bd02ed02fc021c034803620310054e056e059005b2055a079507b00724089608d708b209c309d109f209fa0952790e7a1004070f0a41040a0000012f8a3965980802871f1277e03b370000010a040713000a080000022978141607000002527804072000026587071300040720000265870713001300070918657909527a110b8b68880168ac0110ab52ca1e9cf413006811e05a10185a15105a16086815201211e0127601040704080610028360071000020d0100040407200003027702184e01116317620338040362033004036203280403600720040307060706100409061006dd046811c0fe5a1038015a1530015a162801681540011211e0521604074004082006100829ff070715020408100002620360000262035800026203500002760700000000000000805a687060076800026817e01277e05a677852715d17185d17105d17085d0702774e05115b6a785ba7105ba8185ba9085baa0c98080ca7070c87070f07ac015f083804035a68785f083004035a68685f082804035a68605f072004035a675804074004082006100a9efe07078a015b6a705ba7405ba8485ba9505baa589d729d849d9b9da35b685868871f2487085b6a60658a0924a90a53880a5b6c6865ca0a1277e06537075a674824370065b9096509081cb8095a6b5024b80753900724ca0b654a0a5b6978652909659b0b244a09659b0b657a0c24ac09659b0b27ba27c954ba090cbc005a6840278a54090a0f0a0701244c081c2b09242b0a53980a1c4c080c9808548a070f07ee005a6b185a6c205a62285a64305a633804074004082006100ce3fd0707cf005b67189d775b68209d885b69409d995b6a489daa5b6b705aba585ab9505ab8485b62385b6a300ca2085b69285b6c500cc9090c98086a88200ca9096999200c98085ab7400f0887005b69685b6b580c9b075b68785b6a600ca8080c87076a77200c98086988200c87070f0762022702b85a67505a684806100e64fd0707505b67705b685065870704082000035a67405b694806101092fd5b696027975b68581b88201f88015497085b6b6827b75b6a7827a953a7090cab075378090f09760407040806101218fd0f07950200040820040706101409fd0707f55b68705d18185d18105d18085d084e487b71040704040820061016e9fc0707d55b68700d1820000000410d181c0d18180d18140d18100d180c0d18080d18040408240407061018bdfc0707a90168700407010409244e02110408205b675006101aa3fc07078f5b64400b47010b480b49020b4a036977080c870769991069aa180ca9090c97070b48050b49040b4a060b4b076988080c980869aa1069bb180cba0a0ca8086988200c78020b48090b49080b4a0a0b4b0b6988080c980869aa1069bb180cba0a0ca8080b490d0b4a0c0b4b0e0b4c0f6999080ca90969bb1069cc180ccb0b0cb9096999200c89030b49110b4a100b4b120b4c136999080ca90969bb1069cc180ccb0b0cb9090b4a150b4b140b4c160b471769aa080cba0a69cc106977180cc7070ca7076977200c79090b47190b4a180b4b1a0b4c1b6977080ca70769bb1069cc180ccb0b0cb7070b4a1d0b4b1c0b4c1e0b481f69aa080cba0a69cc106988180cc8080ca8086988200c87079d775a67789d975a67689d375a67609d275a67585d26f8005d26f0005d26e8005d26e0005d26d8005d26d0005d26c8005d26c0005d26b0005d26b8005d26a8005d26a00000010268e000026ac000026ba0000409ff04074e5d2618015d2610015d2608015d2600015b67585a6798005b67605a6790005b67685a6788005b67785a67800002680001026a80000409ff040b2004074e0404074004082006101cf5fa0707e1fd5b6a705ba7485ba8585ba9405baa509d7b9d879d989da90c98080cb7090c89096a99200cb8086988200c98080f08b1fd02775a677806101eb7fa0707a3fd0a0818000207080d040740040302774e03115b6778040806102097fa070783fd5b67705b6878087808040704094e021101687004070104090400224e02116811e0fe5a1018015a1510015a160801681520011211e004074004082006102453fa0f07040004021000026203600002620358000262035000027607000000000000008004062004035f082804035f092004035f0a3004035f0b380403278c1b99041f9901548c0927b827ac54b80c0cba0a54ac0960076800020709a10104092000035f072000039d776b77200747cb9cce0993010f47cbc1b53f86015a19305a12385d11585d11505d11485d11400217404e05115b17505b18585b19485b1a400c98080ca7070c87070f07c1015f072004035f083804035f092804035f0a300403687bfc247b0765790c68ccff1c9c06249c0953670968a7ff6579092479071baa0170a8086587073d78279a54780a0c970727c81bb9201f990154c809547a0907096a015b1a305ba71c5ba8145ba90c5baa049d775a17309d875a17289d975a17209da65d21d8005d21d0005d21c8005d21c0005d21b8005d21b0005d21a8005d21a0005d2190005d2198005d2188005d21800000010218c000021aa000021b80000409ff04074e5d21f8005d21f0005d21e8005d21e0005a16785b17205a17705b17285a17685b17305a17600218e000021a600409ff040b2004074e04040740040820061026abf807075bfe5b1a385ba7485ba8585ba9405baa509d7b9d870cb7080ca9099d990c98086a88200cb9096999200c98080f082dfe0276526706102870f8070720fe5b1738086708040704094e0204002a051b0206102a18025a12385d21b8005d21b0005d21a8005d21a0000217a0004e05115b17b0005b18b8005b19a8005b1aa0000c98080ca7070c87070f07385b675b68185b69085b6a10687bfc247b0765790b68bbff1c9b0c249b0953c70968a7ff6579092479071ba9017098086587072d071b0407040806102ce1f7070791fd01183804070104094e02115d21f8005d21f0005d21e8005d21e0005d21d8005d21d0005d21c8005d21c0005d11705d11785d11685d116000010218e000021ac000021b600409ff04074e5b17d8005a17205b17d0005a17285b17c8005a17305b16c00004074004082006102e6ff707071ffd5b1a385ba7485ba8585ba9405baa509d7b9d870cb7080ca9099d990c98086a88200cb9096999200c98080f08f1fc5a1618027604082052670610302ef70707defc52675b16386576065b18209d8c5b18289d885b19309d995b1a189daa106a186aab38106b1f6aab30106b1e6aab28106b1d6aab20106b1c6aab18106b1b6aab10106b1a6aaa08106a191069106a9a38106a176a9a30106a166a9a28106a156a9a20106a146a9a18106a136a9a10106a126a99081069111068086a893810690f6a893010690e6a892810690d6a892010690c6a891810690b6a891010690a6a8808106809106c6ac8381068076ac8301068066ac8281068056ac8201068046ac8181068036ac8101068026acc08106c0104082006103253f6070703fc026804092004070400344e02116811f85a100407040806103634f60f0704000408100002028804070104094e020407040038057cf6040706103877f604070106103a6ff600a58424092a24145248252da99424492a42846a218490081111919210218410404292925493a42411121212928448925425499224499224499224492a4989244912499224444a29254992244992449224499254129224242125494a495221a69024099290049224490a49d22424294992244992244992244992244992244992244992244992244992244992244992524a8988888888882022d2888844229188482a099124a94a9224514284849a4224a926a51111912464082104104208a12495244408252020499234499244082124499224492a29492249524a292222222222828848232292244924a9244492a49292245121922a0989888846442449499224499224a910498d88888848122292462291484224492a2949122985284929a5244992244992244992244992244992244949922449922444294d1532942a29240400"},"methodIdentifiers":{"setNumber(uint256)":"3fb5c1cb","storedNumber()":"09ce9ccb"}},"irOptimized":"/// @use-src 0:\"contracts/Storage.sol\"\nobject \"Storage_24\" {\n    code {\n        {\n            /// @src 0:57:292  \"contract Storage {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_Storage()\n            constructor_Storage(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"Storage_24_deployed\"), datasize(\"Storage_24_deployed\"))\n            return(_2, datasize(\"Storage_24_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function validator_revert_uint256(value)\n        {\n            if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n        }\n        function abi_decode_t_uint256_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_uint256(value)\n        }\n        function abi_decode_uint256_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_Storage() -> ret_param\n        {\n            let programSize := datasize(\"Storage_24\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint256_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_uint256(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_uint256_to_uint256(slot, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        /// @ast-id 13 @src 0:114:196  \"constructor(uint256 _initialNumber) {...\"\n        function constructor_Storage(var_initialNumber)\n        {\n            /// @src 0:175:189  \"_initialNumber\"\n            let _1 := var_initialNumber\n            let expr := _1\n            /// @src 0:160:189  \"storedNumber = _initialNumber\"\n            update_storage_value_offset_uint256_to_uint256(0x00, expr)\n        }\n    }\n    /// @use-src 0:\"contracts/Storage.sol\"\n    object \"Storage_24_deployed\" {\n        code {\n            {\n                /// @src 0:57:292  \"contract Storage {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x09ce9ccb { external_fun_storedNumber() }\n                    case 0x3fb5c1cb { external_fun_setNumber() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 3 @src 0:80:107  \"uint256 public storedNumber\"\n            function getter_fun_storedNumber() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:57:292  \"contract Storage {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_storedNumber()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_storedNumber()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_setNumber()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_setNumber(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @ast-id 23 @src 0:202:290  \"function setNumber(uint256 _newNumber) public {...\"\n            function fun_setNumber(var_newNumber)\n            {\n                /// @src 0:273:283  \"_newNumber\"\n                let _1 := var_newNumber\n                let expr := _1\n                /// @src 0:258:283  \"storedNumber = _newNumber\"\n                update_storage_value_offset_uint256_to_uint256(0x00, expr)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122075dc6359921e1499d9f985a7254d0a89d23879b28ab1652eafda27c5964704b364736f6c634300081c0033\"\n    }\n}\n","hash":"166d599eca4fdc184da0dd06fe10b8904601dcde48b793ad88c6fabbcc935fe0","factoryDependencies":{}}}}}}