{
  "id": "d6db9af5525292f84a1401804b5eb907",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.19",
  "solcLongVersion": "0.8.19+commit.7dd6d404",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/Storage.sol": {
        "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract Storage {\n    uint256 public storedNumber;\n\n    constructor(uint256 _initialNumber) {\n        storedNumber = _initialNumber;\n    }\n\n    function setNumber(uint256 _newNumber) public {\n        storedNumber = _newNumber;\n    }\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      },
      "evmVersion": "istanbul"
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.28",
    "long_version": "0.8.28+commit.7893614a.Linux.g++",
    "revive_version": "0.1.0-dev.8+commit.fe1b325.llvm-18.1.8",
    "sources": {
      "contracts/Storage.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "contracts/Storage.sol",
          "exportedSymbols": {
            "Storage": [
              24
            ]
          },
          "id": 25,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".19"
              ],
              "nodeType": "PragmaDirective",
              "src": "31:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Storage",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 24,
              "linearizedBaseContracts": [
                24
              ],
              "name": "Storage",
              "nameLocation": "66:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "09ce9ccb",
                  "id": 3,
                  "mutability": "mutable",
                  "name": "storedNumber",
                  "nameLocation": "95:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 24,
                  "src": "80:27:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "80:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 12,
                    "nodeType": "Block",
                    "src": "150:46:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 10,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 8,
                            "name": "storedNumber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "160:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 9,
                            "name": "_initialNumber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "175:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "160:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 11,
                        "nodeType": "ExpressionStatement",
                        "src": "160:29:0"
                      }
                    ]
                  },
                  "id": 13,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 6,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "_initialNumber",
                        "nameLocation": "134:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 13,
                        "src": "126:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "126:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "125:24:0"
                  },
                  "returnParameters": {
                    "id": 7,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "150:0:0"
                  },
                  "scope": 24,
                  "src": "114:82:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 22,
                    "nodeType": "Block",
                    "src": "248:42:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 20,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 18,
                            "name": "storedNumber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "258:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 19,
                            "name": "_newNumber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15,
                            "src": "273:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "258:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 21,
                        "nodeType": "ExpressionStatement",
                        "src": "258:25:0"
                      }
                    ]
                  },
                  "functionSelector": "3fb5c1cb",
                  "id": 23,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setNumber",
                  "nameLocation": "211:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 16,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 15,
                        "mutability": "mutable",
                        "name": "_newNumber",
                        "nameLocation": "229:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 23,
                        "src": "221:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 14,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "221:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "220:20:0"
                  },
                  "returnParameters": {
                    "id": 17,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "248:0:0"
                  },
                  "scope": 24,
                  "src": "202:88:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 25,
              "src": "57:235:0",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "31:261:0"
        }
      }
    },
    "contracts": {
      "contracts/Storage.sol": {
        "Storage": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_initialNumber",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_newNumber",
                  "type": "uint256"
                }
              ],
              "name": "setNumber",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "storedNumber",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "metadata": {
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Aggressive",
              "level_middle_end_size": "Zero"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.8+commit.fe1b325.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Storage.sol\":\"Storage\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Storage.sol\":{\"keccak256\":\"0xd13a7536074cf1e68b8031244bbaf34c730e5eb81b3fac7bb4b2fca569ecbaff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3647996a518bbd04efd19e9d36808c31bdb8f8c0310d7c76d7ee23f580870be3\",\"dweb:/ipfs/QmYMbCcWHxznEpXJ4kSQEfHZqGH1DEmRpP6Z9XHYGK4Tbt\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Linux.g++"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 0/65600 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 922\n// Code size = 2883 bytes\n\n      : @0 (gas: 4)\n     0: a2 = a0\n     2: i32 a3 = a0 >> 16\n     5: a0 = 0x0\n     7: jump @7 if a3 != 0\n      : @1 (gas: 2)\n    10: a3 = 0x10000\n    15: jump @7 if a3 <u a1\n      : @2 (gas: 4)\n    18: a1 = a1 + a2\n    21: i32 a0 = a1 + 0x1f\n    24: a0 = a0 & 0xffffffe0\n    27: jump @4 if a0 <=u 65536\n      : @3 (gas: 2)\n    33: a0 = 0x0\n    35: ret\n      : @4 (gas: 2)\n    37: a1 = i32 [0x20000]\n    42: jump @6 if a1 >=u a0\n      : @5 (gas: 5)\n    45: u32 [0x20000] = a0\n    50: a1 = a0\n    52: a0 = 0x20020\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 3)\n    62: a0 = 0x20020\n    67: a0 = a0 + a1\n    70: ret\n      : @7 (gas: 1)\n    72: ret\n      : @8 (gas: 7)\n    74: sp = sp - 16\n    77: u64 [sp + 8] = ra\n    80: u64 [sp] = s0\n    82: s0 = a0 & 0x1\n    85: a0 = 0x0\n    87: a1 = 0x0\n    89: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 3)\n    93: u64 [0x20008] = a0\n    98: ecalli 2 // 'call_data_size'\n   100: fallthrough\n      : @10 (gas: 3)\n   101: u64 [0x20010] = a0\n   106: u8 [0x30020] = s0\n   111: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   114: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   118: ra = 6, jump @33\n      : @13 [@dyn 3] (gas: 10)\n   123: sp = sp - 288\n   127: u64 [sp + 280] = ra\n   131: u64 [sp + 272] = s0\n   135: u64 [sp + 264] = s1\n   139: s0 = sp + 0x120\n   143: sp = sp & 0xffffffe0\n   146: s1 = sp\n   148: a0 = 0x40\n   151: a1 = 0x20\n   154: ra = 8, jump @0\n      : @14 [@dyn 4] (gas: 1)\n   159: jump @31 if a0 == 0\n      : @15 (gas: 18)\n   163: a1 = 0x20008\n   168: u64 [0x20058] = 0\n   173: u64 [0x20050] = 0\n   178: u64 [0x20048] = 0\n   183: a0 = 0x8000000000000000\n   193: u64 [s1 + 48] = a1\n   196: u64 [0x20060] = a0\n   201: a0 = sp - 32\n   204: a0 = a0 & 0xffffffe0\n   207: u64 [s1 + 56] = a0\n   210: sp = a0\n   212: u64 [a0 + 24] = 0\n   215: u64 [a0 + 16] = 0\n   218: u64 [a0 + 8] = 0\n   221: u64 [a0 + 0] = 0\n   223: i32 a0 = a0 + 0x0\n   225: ecalli 7 // 'value_transferred'\n   227: fallthrough\n      : @16 (gas: 9)\n   228: a3 = u64 [s1 + 56]\n   231: a0 = u64 [a3 + 16]\n   234: a1 = u64 [a3 + 24]\n   237: a2 = u64 [a3 + 8]\n   240: a3 = u64 [a3]\n   242: a1 = a1 | a2\n   245: a0 = a0 | a3\n   248: a0 = a0 | a1\n   251: jump @29 if a0 != 0\n      : @17 (gas: 14)\n   255: a0 = s1 + 0x40\n   258: ra = 0xa\n   261: sp = sp - 144\n   265: u64 [sp + 136] = ra\n   269: u64 [sp + 128] = s0\n   273: u64 [sp + 120] = s1\n   276: s0 = sp + 0x90\n   280: sp = sp & 0xfffffff0\n   283: s1 = i32 [0x20010]\n   288: u64 [sp] = a0\n   290: a0 = 0x40\n   293: a1 = 0x20\n   296: ra = 0x2e\n   299: jump @0\n      : @18 [@dyn 5] (gas: 47)\n   302: a0 = u64 [s1 + 64]\n   305: u64 [s1 + 56] = a0\n   308: a0 = u64 [s1 + 72]\n   311: u64 [s1 + 40] = a0\n   314: a0 = u64 [s1 + 80]\n   317: u64 [s1 + 32] = a0\n   320: a0 = u64 [s1 + 88]\n   323: u64 [s1 + 24] = a0\n   326: u64 [s1 + 216] = 0\n   330: u64 [s1 + 208] = 0\n   334: u64 [s1 + 200] = 0\n   338: u64 [s1 + 192] = 0\n   342: u64 [s1 + 184] = 0\n   346: u64 [s1 + 176] = 0\n   350: u64 [s1 + 168] = 0\n   354: u64 [s1 + 160] = 0\n   358: u64 [s1 + 144] = 0\n   362: u64 [s1 + 152] = 0\n   366: u64 [s1 + 136] = 0\n   370: u64 [s1 + 128] = 256\n   376: i32 a1 = s1 + 0xc0\n   380: i32 a3 = s1 + 0xa0\n   384: i32 a4 = s1 + 0x80\n   388: a2 = 0xffffffff\n   391: a0 = 0x0\n   393: ecalli 3 // 'get_storage'\n   395: u64 [s1 + 248] = 0\n   399: u64 [s1 + 240] = 0\n   403: u64 [s1 + 232] = 0\n   407: u64 [s1 + 224] = 0\n   411: a0 = u64 [s1 + 24]\n   414: u64 [s1 + 120] = a0\n   417: a0 = u64 [s1 + 32]\n   420: u64 [s1 + 112] = a0\n   423: a0 = u64 [s1 + 40]\n   426: u64 [s1 + 104] = a0\n   429: a0 = u64 [s1 + 56]\n   432: u64 [s1 + 96] = a0\n   435: i32 a1 = s1 + 0xe0\n   439: i32 a3 = s1 + 0x60\n   442: a2 = 0xffffffff\n   445: a4 = 0x20\n   448: a0 = 0x0\n   450: ecalli 6 // 'set_storage'\n   452: a0 = 0x40\n   455: a1 = 0x20\n   458: ra = 12, jump @0\n      : @19 [@dyn 6] (gas: 1)\n   463: jump @31 if a0 == 0\n      : @20 (gas: 16)\n   467: a3 = u64 [s1 + 48]\n   470: a0 = u64 [a3 + 72]\n   473: a1 = u64 [a3 + 88]\n   476: a2 = u64 [a3 + 64]\n   479: a3 = u64 [a3 + 80]\n   482: a4 = reverse a0\n   484: a0 = reverse a1\n   486: a1 = a0 | a4\n   489: a2 = a2 | a3\n   492: a2 = reverse a2\n   494: a1 = a1 | a2\n   497: a1 = a1 >> 32\n   500: a2 = a2 | a4\n   503: a2 = a2 << 32\n   506: a1 = a1 | a2\n   509: jump @31 if a1 != 0\n      : @21 (gas: 3)\n   512: i32 a0 = a0 + 0x0\n   514: u64 [s1 + 56] = a0\n   517: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 1)\n   522: jump @31 if a0 == 0\n      : @23 (gas: 7)\n   525: a0 = u64 [s1 + 48]\n   528: a1 = u64 [s1 + 56]\n   531: i32 a0 = a0 + a1\n   534: a1 = 0x0\n   536: a2 = 0x0\n   538: ecalli 0 // 'call_data_copy'\n   539: fallthrough\n      : @24 (gas: 2)\n   540: a1 = i32 [0x20014]\n   545: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   548: a0 = 0x30040\n   553: i32 a0 = a0 + 0x0\n   555: ecalli 5 // 'set_immutable_data'\n   557: fallthrough\n      : @26 (gas: 3)\n   558: a0 = u64 [s1 + 56]\n   561: a1 = 0x0\n   563: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 1)\n   568: jump @31 if a0 == 0\n      : @28 (gas: 7)\n   571: a0 = u64 [s1 + 48]\n   574: a1 = u64 [s1 + 56]\n   577: i32 a1 = a1 + a0\n   580: a0 = 0x0\n   582: a2 = 0x0\n   584: ecalli 4 // 'seal_return'\n   586: fallthrough\n      : @29 (gas: 3)\n   587: a0 = 0x0\n   589: a1 = 0x0\n   591: ra = 18, jump @0\n      : @30 [@dyn 9] (gas: 1)\n   596: jump @32 if a0 != 0\n      : @31 (gas: 1)\n   599: trap\n      : @32 (gas: 6)\n   600: a1 = i32 [s1 + 48]\n   603: a0 = 0x1\n   606: a2 = 0x0\n   608: ra = 0x14\n   611: ecalli 4 // 'seal_return'\n   613: fallthrough\n      : @33 [@dyn 10] (gas: 8)\n   614: sp = sp - 64\n   617: u64 [sp + 56] = ra\n   620: u64 [sp + 48] = s0\n   623: s0 = sp + 0x40\n   626: sp = sp & 0xffffffe0\n   629: a0 = 0x40\n   632: a1 = 0x20\n   635: ra = 22, jump @0\n      : @34 [@dyn 11] (gas: 1)\n   640: jump @36 if a0 != 0\n      : @35 (gas: 1)\n   643: trap\n      : @36 (gas: 7)\n   644: u64 [0x20058] = 0\n   649: u64 [0x20050] = 0\n   654: a1 = i32 [0x20010]\n   659: a2 = 0x8000000000000000\n   669: u64 [0x20060] = a2\n   674: u64 [0x20048] = 0\n   679: jump @41 if a1 <=u 3\n      : @37 (gas: 4)\n   683: i32 a0 = sp + 0x0\n   685: a1 = 0x0\n   687: ecalli 1 // 'call_data_load'\n   689: fallthrough\n      : @38 (gas: 2)\n   690: a0 = i32 [sp + 28]\n   693: jump @42 if a0 == 164535499\n      : @39 (gas: 1)\n   700: jump @41 if a0 != 1068876235\n      : @40 (gas: 14)\n   707: ra = 0x18\n   710: sp = sp - 256\n   714: u64 [sp + 248] = ra\n   718: u64 [sp + 240] = s0\n   722: u64 [sp + 232] = s1\n   726: s0 = sp + 0x100\n   730: sp = sp & 0xffffffe0\n   733: u64 [sp + 56] = 0\n   736: u64 [sp + 48] = 0\n   739: u64 [sp + 40] = 0\n   742: u64 [sp + 32] = 0\n   745: i32 a0 = sp + 0x20\n   748: ecalli 7 // 'value_transferred'\n   750: jump @98\n      : @41 [@dyn 12] (gas: 1)\n   753: ra = 26, jump @113\n      : @42 [@dyn 13] (gas: 14)\n   758: ra = 0x1c\n   761: sp = sp - 224\n   765: u64 [sp + 216] = ra\n   769: u64 [sp + 208] = s0\n   773: u64 [sp + 200] = s1\n   777: s0 = sp + 0xe0\n   781: sp = sp & 0xffffffe0\n   784: u64 [sp + 88] = 0\n   787: u64 [sp + 80] = 0\n   790: u64 [sp + 72] = 0\n   793: u64 [sp + 64] = 0\n   796: i32 a0 = sp + 0x40\n   799: ecalli 7 // 'value_transferred'\n   801: jump @80\n      : @43 [@dyn 14] (gas: 7)\n   804: sp = sp - 16\n   807: u64 [sp + 8] = ra\n   810: u64 [sp] = s0\n   812: s0 = a0\n   814: a0 = 0x40\n   817: a1 = 0x20\n   820: ra = 30, jump @0\n      : @44 [@dyn 15] (gas: 1)\n   825: jump @46 if a0 == 0\n      : @45 (gas: 16)\n   828: a1 = u64 [0x20060]\n   833: a2 = u64 [0x20058]\n   838: a3 = u64 [0x20050]\n   843: a0 = u64 [0x20048]\n   848: a1 = reverse a1\n   850: a2 = reverse a2\n   852: a3 = reverse a3\n   854: a0 = reverse a0\n   856: u64 [s0 + 24] = a0\n   859: u64 [s0 + 16] = a3\n   862: u64 [s0 + 8] = a2\n   865: u64 [s0] = a1\n   867: ra = u64 [sp + 8]\n   870: s0 = u64 [sp]\n   872: sp = sp + 0x10\n   875: ret\n      : @46 (gas: 1)\n   877: trap\n      : @47 (gas: 43)\n   878: sp = sp - 40\n   881: u64 [sp + 32] = ra\n   884: u64 [sp + 24] = s0\n   887: u64 [sp + 16] = s1\n   890: t1 = u64 [a0 + 24]\n   893: t2 = u64 [a0 + 16]\n   896: a2 = u64 [a0 + 8]\n   899: ra = u64 [a0]\n   901: a5 = u64 [a1]\n   903: t0 = u64 [a1 + 24]\n   906: s0 = u64 [a1 + 8]\n   909: a3 = u64 [a1 + 16]\n   912: s1 = a5 + 0x1f\n   915: a4 = s1 <u a5\n   918: a0 = s0 + a4\n   921: s0 = a0 <u s0\n   924: s0 = a4 if a4 == 0\n   927: a1 = a3 + s0\n   930: a3 = a1 <u a3\n   933: s1 = s1 & 0xffffffe0\n   936: u64 [sp + 8] = ra\n   939: ra = ra + s1\n   942: s1 = ra <u s1\n   945: a4 = a0 + a2\n   948: a5 = a4 + s1\n   951: a4 = a5 ^ a0\n   954: s0 = a5 <u a0\n   957: s0 = s1 if a4 == 0\n   960: a4 = a1 + t2\n   963: s0 = s0 + a4\n   966: s1 = s0 <u a4\n   969: a0 = a4 <u a1\n   972: t0 = t0 + t1\n   975: a1 = t0 + a3\n   978: a0 = a0 + a1\n   981: s1 = s1 + a0\n   984: a0 = s1 >u 0x0\n   986: a1 = s0 >u 0x0\n   988: a1 = a0 if s1 != 0\n   991: a0 = s0 | s1\n   994: a4 = a5 >u 0x0\n   996: a4 = a1 if a0 != 0\n   999: jump @52 if a4 != 0\n      : @48 (gas: 13)\n  1002: a0 = u64 [sp + 8]\n  1005: a0 = ra <u a0\n  1008: a1 = a5 ^ a2\n  1011: a2 = a5 <u a2\n  1014: a2 = a0 if a1 == 0\n  1017: a0 = s0 <u t2\n  1020: a1 = s1 ^ t1\n  1023: a3 = s1 <u t1\n  1026: a3 = a0 if a1 == 0\n  1029: a0 = s0 ^ t2\n  1032: a0 = a0 | a1\n  1035: a3 = a2 if a0 == 0\n  1038: jump @52 if a3 != 0\n      : @49 (gas: 5)\n  1041: u64 [sp] = a5\n  1043: u64 [sp + 8] = ra\n  1046: a0 = 0x40\n  1049: a1 = 0x20\n  1052: ra = 32, jump @0\n      : @50 [@dyn 16] (gas: 1)\n  1057: jump @58 if a0 == 0\n      : @51 (gas: 16)\n  1061: a0 = reverse s1\n  1063: a1 = 0x20008\n  1068: a2 = reverse s0\n  1070: a3 = u64 [sp]\n  1072: a3 = reverse a3\n  1074: a4 = u64 [sp + 8]\n  1077: a4 = reverse a4\n  1079: u64 [0x20060] = a4\n  1084: u64 [0x20058] = a3\n  1089: u64 [0x20050] = a2\n  1094: u64 [0x20048] = a0\n  1099: ra = u64 [sp + 32]\n  1102: s0 = u64 [sp + 24]\n  1105: s1 = u64 [sp + 16]\n  1108: sp = sp + 0x28\n  1111: ret\n      : @52 (gas: 3)\n  1113: a1 = 0x20\n  1116: a0 = 0x0\n  1118: ra = 34, jump @0\n      : @53 [@dyn 17] (gas: 1)\n  1123: jump @58 if a0 == 0\n      : @54 (gas: 8)\n  1126: s0 = 0x20008\n  1131: u64 [0x20020] = 0\n  1136: u64 [0x20018] = 0\n  1141: u64 [0x20010] = 0\n  1146: u64 [0x20008] = 1903904846\n  1155: a0 = 0x4\n  1158: a1 = 0x20\n  1161: ra = 36, jump @0\n      : @55 [@dyn 18] (gas: 1)\n  1166: jump @58 if a0 == 0\n      : @56 (gas: 11)\n  1169: u32 [s0 + 32] = 1090519040\n  1176: u32 [s0 + 28] = 0\n  1179: u32 [s0 + 24] = 0\n  1182: u32 [s0 + 20] = 0\n  1185: u32 [s0 + 16] = 0\n  1188: u32 [s0 + 12] = 0\n  1191: u32 [s0 + 8] = 0\n  1194: u32 [s0 + 4] = 0\n  1197: a1 = 0x24\n  1200: a0 = 0x0\n  1202: ra = 38, jump @0\n      : @57 [@dyn 19] (gas: 1)\n  1207: jump @59 if a0 != 0\n      : @58 (gas: 1)\n  1210: trap\n      : @59 (gas: 6)\n  1211: i32 a1 = s0 + 0x0\n  1213: a0 = 0x1\n  1216: a2 = 0x24\n  1219: ra = 0x28\n  1222: ecalli 4 // 'seal_return'\n  1224: fallthrough\n      : @60 [@dyn 20] (gas: 18)\n  1225: sp = sp - 160\n  1229: u64 [sp + 152] = ra\n  1233: u64 [sp + 144] = s0\n  1237: u64 [sp + 136] = s1\n  1241: s0 = sp + 0xa0\n  1245: sp = sp & 0xfffffff0\n  1248: a2 = u64 [a1 + 24]\n  1251: u64 [sp + 56] = a2\n  1254: a2 = u64 [a1 + 16]\n  1257: u64 [sp + 32] = a2\n  1260: a2 = u64 [a1 + 8]\n  1263: u64 [sp + 40] = a2\n  1266: a1 = u64 [a1]\n  1268: u64 [sp + 48] = a1\n  1271: s1 = a0\n  1273: a0 = 0x40\n  1276: a1 = 0x20\n  1279: ra = 42, jump @0\n      : @61 [@dyn 21] (gas: 1)\n  1284: jump @64 if a0 == 0\n      : @62 (gas: 27)\n  1288: a1 = u64 [0x20060]\n  1293: a2 = u64 [0x20058]\n  1298: a3 = u64 [0x20050]\n  1303: a0 = u64 [0x20048]\n  1308: a1 = reverse a1\n  1310: u64 [sp + 24] = a1\n  1313: a2 = reverse a2\n  1315: u64 [sp + 16] = a2\n  1318: a3 = reverse a3\n  1320: u64 [sp + 8] = a3\n  1323: a4 = reverse a0\n  1325: u64 [sp] = a4\n  1327: a0 = u64 [sp + 32]\n  1330: u64 [sp + 80] = a0\n  1333: a0 = u64 [sp + 40]\n  1336: u64 [sp + 72] = a0\n  1339: a0 = u64 [sp + 48]\n  1342: u64 [sp + 64] = a0\n  1345: u64 [sp + 120] = a4\n  1348: u64 [sp + 112] = a3\n  1351: u64 [sp + 104] = a2\n  1354: u64 [sp + 96] = a1\n  1357: a0 = sp + 0x60\n  1360: a1 = sp + 0x40\n  1363: a2 = u64 [sp + 56]\n  1366: u64 [sp + 88] = a2\n  1369: ra = 44, jump @47\n      : @63 [@dyn 22] (gas: 14)\n  1374: a0 = u64 [sp]\n  1376: u64 [s1 + 24] = a0\n  1379: a0 = u64 [sp + 8]\n  1382: u64 [s1 + 16] = a0\n  1385: a0 = u64 [sp + 16]\n  1388: u64 [s1 + 8] = a0\n  1391: a0 = u64 [sp + 24]\n  1394: u64 [s1] = a0\n  1396: sp = s0 - 160\n  1400: ra = u64 [sp + 152]\n  1404: s0 = u64 [sp + 144]\n  1408: s1 = u64 [sp + 136]\n  1412: sp = sp + 0xa0\n  1416: ret\n      : @64 (gas: 1)\n  1418: trap\n      : @65 [@dyn 23] (gas: 1)\n  1419: jump @77 if a0 == 0\n      : @66 (gas: 27)\n  1423: a4 = 0x20008\n  1428: u64 [sp + 40] = s1\n  1431: a0 = s1 << 32\n  1434: a0 = a0 >> 32\n  1437: a1 = u64 [0x20060]\n  1442: a2 = u64 [0x20058]\n  1447: a3 = u64 [0x20050]\n  1452: u64 [sp + 32] = a4\n  1455: a4 = u64 [0x20048]\n  1460: a5 = reverse a1\n  1462: u64 [sp + 8] = a5\n  1465: a1 = reverse a2\n  1467: u64 [sp + 16] = a1\n  1470: s1 = reverse a3\n  1472: a2 = reverse a4\n  1474: u64 [sp + 24] = a2\n  1477: u64 [sp + 72] = 0\n  1480: u64 [sp + 64] = 0\n  1483: u64 [sp + 56] = 0\n  1486: u64 [sp + 48] = a0\n  1489: u64 [sp + 104] = a2\n  1492: u64 [sp + 96] = s1\n  1495: u64 [sp + 88] = a1\n  1498: a0 = sp + 0x50\n  1501: a1 = sp + 0x30\n  1504: u64 [sp + 80] = a5\n  1507: ra = 48, jump @47\n      : @67 [@dyn 24] (gas: 11)\n  1512: a2 = u64 [sp + 8]\n  1515: a0 = u64 [sp + 24]\n  1518: a1 = u64 [sp + 16]\n  1521: a0 = a0 | a1\n  1524: a1 = a2 | s1\n  1527: a1 = a1 | a0\n  1530: a1 = a1 >> 32\n  1533: a0 = a0 | s1\n  1536: a0 = a0 << 32\n  1539: a0 = a0 | a1\n  1542: jump @77 if a0 != 0\n      : @68 (gas: 4)\n  1546: i32 s1 = a2 + 0x0\n  1548: a0 = s1\n  1550: a1 = u64 [sp + 40]\n  1553: ra = 50, jump @0\n      : @69 [@dyn 25] (gas: 1)\n  1558: jump @77 if a0 == 0\n      : @70 (gas: 8)\n  1562: a0 = u64 [sp + 32]\n  1565: u64 [sp + 24] = s1\n  1568: i32 a0 = a0 + s1\n  1571: s1 = u64 [sp + 40]\n  1574: a1 = s1\n  1576: a2 = 0x0\n  1578: ecalli 0 // 'call_data_copy'\n  1579: fallthrough\n      : @71 (gas: 1)\n  1580: jump @75 if s1 <=u 31\n      : @72 (gas: 4)\n  1585: a1 = 0x20\n  1588: s1 = u64 [sp + 24]\n  1591: a0 = s1\n  1593: ra = 52, jump @0\n      : @73 [@dyn 26] (gas: 1)\n  1598: jump @77 if a0 == 0\n      : @74 (gas: 105)\n  1602: a0 = u64 [sp + 32]\n  1605: s1 = s1 + a0\n  1608: a0 = u8 [s1 + 1]\n  1611: a1 = u8 [s1]\n  1613: a2 = u8 [s1 + 2]\n  1616: a3 = u8 [s1 + 3]\n  1619: a0 = a0 << 8\n  1622: a0 = a0 | a1\n  1625: a2 = a2 << 16\n  1628: a3 = a3 << 24\n  1631: a2 = a2 | a3\n  1634: a0 = a0 | a2\n  1637: a1 = u8 [s1 + 5]\n  1640: a2 = u8 [s1 + 4]\n  1643: a3 = u8 [s1 + 6]\n  1646: a4 = u8 [s1 + 7]\n  1649: a1 = a1 << 8\n  1652: a1 = a1 | a2\n  1655: a3 = a3 << 16\n  1658: a4 = a4 << 24\n  1661: a3 = a3 | a4\n  1664: a1 = a1 | a3\n  1667: a1 = a1 << 32\n  1670: t0 = a1 | a0\n  1673: a1 = u8 [s1 + 9]\n  1676: a2 = u8 [s1 + 8]\n  1679: a3 = u8 [s1 + 10]\n  1682: a4 = u8 [s1 + 11]\n  1685: a1 = a1 << 8\n  1688: a1 = a1 | a2\n  1691: a3 = a3 << 16\n  1694: a4 = a4 << 24\n  1697: a3 = a3 | a4\n  1700: a1 = a1 | a3\n  1703: a2 = u8 [s1 + 13]\n  1706: a3 = u8 [s1 + 12]\n  1709: a4 = u8 [s1 + 14]\n  1712: a5 = u8 [s1 + 15]\n  1715: a2 = a2 << 8\n  1718: a2 = a2 | a3\n  1721: a4 = a4 << 16\n  1724: a5 = a5 << 24\n  1727: a4 = a4 | a5\n  1730: a2 = a2 | a4\n  1733: a2 = a2 << 32\n  1736: a1 = a1 | a2\n  1739: a2 = u8 [s1 + 17]\n  1742: a3 = u8 [s1 + 16]\n  1745: a4 = u8 [s1 + 18]\n  1748: a5 = u8 [s1 + 19]\n  1751: a2 = a2 << 8\n  1754: a2 = a2 | a3\n  1757: a4 = a4 << 16\n  1760: a5 = a5 << 24\n  1763: a4 = a4 | a5\n  1766: a2 = a2 | a4\n  1769: a3 = u8 [s1 + 21]\n  1772: a4 = u8 [s1 + 20]\n  1775: a5 = u8 [s1 + 22]\n  1778: a0 = u8 [s1 + 23]\n  1781: a3 = a3 << 8\n  1784: a3 = a3 | a4\n  1787: a5 = a5 << 16\n  1790: a0 = a0 << 24\n  1793: a0 = a0 | a5\n  1796: a0 = a0 | a3\n  1799: a0 = a0 << 32\n  1802: a2 = a2 | a0\n  1805: a0 = u8 [s1 + 25]\n  1808: a3 = u8 [s1 + 24]\n  1811: a4 = u8 [s1 + 26]\n  1814: a5 = u8 [s1 + 27]\n  1817: a0 = a0 << 8\n  1820: a0 = a0 | a3\n  1823: a4 = a4 << 16\n  1826: a5 = a5 << 24\n  1829: a4 = a4 | a5\n  1832: a0 = a0 | a4\n  1835: a3 = u8 [s1 + 29]\n  1838: a4 = u8 [s1 + 28]\n  1841: a5 = u8 [s1 + 30]\n  1844: s1 = u8 [s1 + 31]\n  1847: a3 = a3 << 8\n  1850: a3 = a3 | a4\n  1853: a5 = a5 << 16\n  1856: s1 = s1 << 24\n  1859: a5 = a5 | s1\n  1862: a3 = a3 | a5\n  1865: a3 = a3 << 32\n  1868: a0 = a0 | a3\n  1871: a0 = reverse a0\n  1873: a2 = reverse a2\n  1875: a1 = reverse a1\n  1877: a3 = reverse t0\n  1879: a4 = u64 [sp]\n  1881: u64 [a4 + 24] = a3\n  1884: u64 [a4 + 16] = a1\n  1887: u64 [a4 + 8] = a2\n  1890: u64 [a4] = a0\n  1892: sp = s0 - 144\n  1896: ra = u64 [sp + 136]\n  1900: s0 = u64 [sp + 128]\n  1904: s1 = u64 [sp + 120]\n  1907: sp = sp + 0x90\n  1911: ret\n      : @75 (gas: 3)\n  1913: a0 = 0x0\n  1915: a1 = 0x0\n  1917: ra = 54, jump @0\n      : @76 [@dyn 27] (gas: 1)\n  1922: jump @78 if a0 != 0\n      : @77 (gas: 1)\n  1925: trap\n      : @78 (gas: 6)\n  1926: a1 = i32 [sp + 32]\n  1929: a0 = 0x1\n  1932: a2 = 0x0\n  1934: ra = 0x38\n  1937: ecalli 4 // 'seal_return'\n  1939: fallthrough\n      : @79 [@dyn 28] (gas: 9)\n  1940: a2 = u64 [a1 + 24]\n  1943: a3 = u64 [a1 + 16]\n  1946: a4 = u64 [a1 + 8]\n  1949: a1 = u64 [a1]\n  1951: u64 [a0 + 24] = a2\n  1954: u64 [a0 + 16] = a3\n  1957: u64 [a0 + 8] = a4\n  1960: u64 [a0] = a1\n  1962: ret\n      : @80 (gas: 8)\n  1964: a0 = u64 [sp + 80]\n  1967: a1 = u64 [sp + 88]\n  1970: a2 = u64 [sp + 72]\n  1973: a3 = u64 [sp + 64]\n  1976: a1 = a1 | a2\n  1979: a0 = a0 | a3\n  1982: a0 = a0 | a1\n  1985: jump @85 if a0 != 0\n      : @81 (gas: 2)\n  1988: a0 = i32 [0x20010]\n  1993: jump @88 if a0 >u 3\n      : @82 (gas: 3)\n  1997: a0 = 0x0\n  1999: a1 = 0x0\n  2001: ra = 58, jump @0\n      : @83 [@dyn 29] (gas: 1)\n  2006: jump @87 if a0 == 0\n      : @84 (gas: 6)\n  2009: a1 = 0x20008\n  2014: i32 a1 = a1 + 0x0\n  2016: a0 = 0x1\n  2019: a2 = 0x0\n  2021: ecalli 4 // 'seal_return'\n  2023: fallthrough\n      : @85 (gas: 3)\n  2024: a0 = 0x0\n  2026: a1 = 0x0\n  2028: ra = 60, jump @0\n      : @86 [@dyn 30] (gas: 1)\n  2033: jump @96 if a0 != 0\n      : @87 (gas: 1)\n  2037: trap\n      : @88 (gas: 28)\n  2038: u64 [sp + 184] = 0\n  2042: u64 [sp + 176] = 0\n  2046: u64 [sp + 168] = 0\n  2050: u64 [sp + 160] = 0\n  2054: u64 [sp + 152] = 0\n  2058: u64 [sp + 144] = 0\n  2062: u64 [sp + 136] = 0\n  2066: u64 [sp + 128] = 0\n  2070: u64 [sp + 112] = 0\n  2073: u64 [sp + 120] = 0\n  2076: u64 [sp + 104] = 0\n  2079: u64 [sp + 96] = 256\n  2084: i32 a1 = sp + 0xa0\n  2088: i32 a3 = sp + 0x80\n  2092: i32 a4 = sp + 0x60\n  2095: a2 = 0xffffffff\n  2098: a0 = 0x0\n  2100: ecalli 3 // 'get_storage'\n  2102: a0 = u64 [sp + 152]\n  2106: u64 [sp + 40] = a0\n  2109: a0 = u64 [sp + 144]\n  2113: u64 [sp + 48] = a0\n  2116: a0 = u64 [sp + 136]\n  2120: u64 [sp + 56] = a0\n  2123: s1 = u64 [sp + 128]\n  2127: a0 = 0x40\n  2130: a1 = 0x20\n  2133: ra = 62, jump @0\n      : @89 [@dyn 31] (gas: 1)\n  2138: jump @87 if a0 == 0\n      : @90 (gas: 17)\n  2141: u64 [sp + 32] = s1\n  2144: s1 = 0x20008\n  2149: a0 = u64 [0x20050]\n  2154: a1 = u64 [0x20060]\n  2159: a2 = u64 [0x20048]\n  2164: a3 = u64 [0x20058]\n  2169: a4 = reverse a0\n  2171: a0 = reverse a1\n  2173: a1 = a0 | a4\n  2176: a2 = a2 | a3\n  2179: a2 = reverse a2\n  2181: a1 = a1 | a2\n  2184: a1 = a1 >> 32\n  2187: a2 = a2 | a4\n  2190: a2 = a2 << 32\n  2193: a1 = a1 | a2\n  2196: jump @87 if a1 != 0\n      : @91 (gas: 4)\n  2200: i32 a0 = a0 + 0x0\n  2202: a1 = 0x20\n  2205: u64 [sp + 24] = a0\n  2208: ra = 64, jump @0\n      : @92 [@dyn 32] (gas: 1)\n  2213: jump @87 if a0 == 0\n      : @93 (gas: 72)\n  2217: a0 = u64 [sp + 24]\n  2220: s1 = s1 + a0\n  2223: a1 = u64 [sp + 40]\n  2226: a5 = reverse a1\n  2228: a1 = u64 [sp + 48]\n  2231: a1 = reverse a1\n  2233: a2 = u64 [sp + 56]\n  2236: a2 = reverse a2\n  2238: a3 = u64 [sp + 32]\n  2241: a3 = reverse a3\n  2243: u8 [s1 + 24] = a3\n  2246: a4 = a3 >> 56\n  2249: u8 [s1 + 31] = a4\n  2252: a4 = a3 >> 48\n  2255: u8 [s1 + 30] = a4\n  2258: a4 = a3 >> 40\n  2261: u8 [s1 + 29] = a4\n  2264: a4 = a3 >> 32\n  2267: u8 [s1 + 28] = a4\n  2270: a4 = a3 >> 24\n  2273: u8 [s1 + 27] = a4\n  2276: a4 = a3 >> 16\n  2279: u8 [s1 + 26] = a4\n  2282: a3 = a3 >> 8\n  2285: u8 [s1 + 25] = a3\n  2288: u8 [s1 + 16] = a2\n  2291: a3 = a2 >> 56\n  2294: u8 [s1 + 23] = a3\n  2297: a3 = a2 >> 48\n  2300: u8 [s1 + 22] = a3\n  2303: a3 = a2 >> 40\n  2306: u8 [s1 + 21] = a3\n  2309: a3 = a2 >> 32\n  2312: u8 [s1 + 20] = a3\n  2315: a3 = a2 >> 24\n  2318: u8 [s1 + 19] = a3\n  2321: a3 = a2 >> 16\n  2324: u8 [s1 + 18] = a3\n  2327: a2 = a2 >> 8\n  2330: u8 [s1 + 17] = a2\n  2333: u8 [s1 + 8] = a1\n  2336: a2 = a1 >> 56\n  2339: u8 [s1 + 15] = a2\n  2342: a2 = a1 >> 48\n  2345: u8 [s1 + 14] = a2\n  2348: a2 = a1 >> 40\n  2351: u8 [s1 + 13] = a2\n  2354: a2 = a1 >> 32\n  2357: u8 [s1 + 12] = a2\n  2360: a2 = a1 >> 24\n  2363: u8 [s1 + 11] = a2\n  2366: a2 = a1 >> 16\n  2369: u8 [s1 + 10] = a2\n  2372: a1 = a1 >> 8\n  2375: u8 [s1 + 9] = a1\n  2378: u8 [s1] = a5\n  2380: a1 = a5 >> 56\n  2383: u8 [s1 + 7] = a1\n  2386: a1 = a5 >> 48\n  2389: u8 [s1 + 6] = a1\n  2392: a1 = a5 >> 40\n  2395: u8 [s1 + 5] = a1\n  2398: a1 = a5 >> 32\n  2401: u8 [s1 + 4] = a1\n  2404: a1 = a5 >> 24\n  2407: u8 [s1 + 3] = a1\n  2410: a1 = a5 >> 16\n  2413: u8 [s1 + 2] = a1\n  2416: a5 = a5 >> 8\n  2419: u8 [s1 + 1] = a5\n  2422: a1 = 0x20\n  2425: ra = 66, jump @0\n      : @94 [@dyn 33] (gas: 1)\n  2430: jump @87 if a0 == 0\n      : @95 (gas: 5)\n  2434: i32 a1 = s1 + 0x0\n  2436: a2 = 0x20\n  2439: a0 = 0x0\n  2441: ecalli 4 // 'seal_return'\n  2443: fallthrough\n      : @96 (gas: 7)\n  2444: a1 = 0x20008\n  2449: i32 a1 = a1 + 0x0\n  2451: a0 = 0x1\n  2454: a2 = 0x0\n  2456: ra = 0x44\n  2459: ecalli 4 // 'seal_return'\n  2461: fallthrough\n      : @97 [@dyn 34] (gas: 1)\n  2462: ret\n      : @98 (gas: 8)\n  2464: a0 = u64 [sp + 48]\n  2467: a1 = u64 [sp + 56]\n  2470: a2 = u64 [sp + 40]\n  2473: a3 = u64 [sp + 32]\n  2476: a1 = a1 | a2\n  2479: a0 = a0 | a3\n  2482: a0 = a0 | a1\n  2485: jump @103 if a0 != 0\n      : @99 (gas: 2)\n  2488: a0 = i32 [0x20010]\n  2493: jump @106 if a0 >u 35\n      : @100 (gas: 3)\n  2497: a0 = 0x0\n  2499: a1 = 0x0\n  2501: ra = 70, jump @0\n      : @101 [@dyn 35] (gas: 1)\n  2506: jump @105 if a0 == 0\n      : @102 (gas: 6)\n  2509: a1 = 0x20008\n  2514: i32 a1 = a1 + 0x0\n  2516: a0 = 0x1\n  2519: a2 = 0x0\n  2521: ecalli 4 // 'seal_return'\n  2523: fallthrough\n      : @103 (gas: 3)\n  2524: a0 = 0x0\n  2526: a1 = 0x0\n  2528: ra = 72, jump @0\n      : @104 [@dyn 36] (gas: 1)\n  2533: jump @112 if a0 != 0\n      : @105 (gas: 1)\n  2537: trap\n      : @106 (gas: 48)\n  2538: i32 a0 = sp + 0xc0\n  2542: a1 = 0x4\n  2545: ecalli 1 // 'call_data_load'\n  2547: a0 = u64 [sp + 192]\n  2551: u64 [sp + 24] = a0\n  2554: a0 = u64 [sp + 200]\n  2558: u64 [sp + 16] = a0\n  2561: a0 = u64 [sp + 208]\n  2565: u64 [sp + 8] = a0\n  2568: s1 = u64 [sp + 216]\n  2572: u64 [sp + 184] = 0\n  2576: u64 [sp + 176] = 0\n  2580: u64 [sp + 168] = 0\n  2584: u64 [sp + 160] = 0\n  2588: u64 [sp + 152] = 0\n  2592: u64 [sp + 144] = 0\n  2596: u64 [sp + 136] = 0\n  2600: u64 [sp + 128] = 0\n  2604: u64 [sp + 112] = 0\n  2607: u64 [sp + 120] = 0\n  2610: u64 [sp + 104] = 0\n  2613: u64 [sp + 96] = 256\n  2618: i32 a1 = sp + 0xa0\n  2622: i32 a3 = sp + 0x80\n  2626: i32 a4 = sp + 0x60\n  2629: a2 = 0xffffffff\n  2632: a0 = 0x0\n  2634: ecalli 3 // 'get_storage'\n  2636: u64 [sp + 216] = 0\n  2640: u64 [sp + 208] = 0\n  2644: u64 [sp + 200] = 0\n  2648: u64 [sp + 192] = 0\n  2652: u64 [sp + 88] = s1\n  2655: a0 = u64 [sp + 8]\n  2658: u64 [sp + 80] = a0\n  2661: a0 = u64 [sp + 16]\n  2664: u64 [sp + 72] = a0\n  2667: a0 = u64 [sp + 24]\n  2670: u64 [sp + 64] = a0\n  2673: i32 a1 = sp + 0xc0\n  2677: i32 a3 = sp + 0x40\n  2680: a2 = 0xffffffff\n  2683: a4 = 0x20\n  2686: a0 = 0x0\n  2688: ecalli 6 // 'set_storage'\n  2690: a0 = 0x40\n  2693: a1 = 0x20\n  2696: ra = 74, jump @0\n      : @107 [@dyn 37] (gas: 1)\n  2701: jump @105 if a0 == 0\n      : @108 (gas: 16)\n  2705: s1 = 0x20008\n  2710: a0 = u64 [0x20050]\n  2715: a1 = u64 [0x20060]\n  2720: a2 = u64 [0x20048]\n  2725: a3 = u64 [0x20058]\n  2730: a4 = reverse a0\n  2732: a0 = reverse a1\n  2734: a1 = a0 | a4\n  2737: a2 = a2 | a3\n  2740: a2 = reverse a2\n  2742: a1 = a1 | a2\n  2745: a1 = a1 >> 32\n  2748: a2 = a2 | a4\n  2751: a2 = a2 << 32\n  2754: a1 = a1 | a2\n  2757: jump @105 if a1 != 0\n      : @109 (gas: 3)\n  2761: i32 a0 = a0 + 0x0\n  2763: u64 [sp + 24] = a0\n  2766: ra = 76, jump @0\n      : @110 [@dyn 38] (gas: 1)\n  2771: jump @105 if a0 == 0\n      : @111 (gas: 6)\n  2775: a1 = u64 [sp + 24]\n  2778: i32 a1 = a1 + s1\n  2781: a0 = 0x0\n  2783: a2 = 0x0\n  2785: ecalli 4 // 'seal_return'\n  2787: fallthrough\n      : @112 (gas: 7)\n  2788: a1 = 0x20008\n  2793: i32 a1 = a1 + 0x0\n  2795: a0 = 0x1\n  2798: a2 = 0x0\n  2800: ra = 0x4e\n  2803: ecalli 4 // 'seal_return'\n  2805: fallthrough\n      : @113 [@dyn 39] (gas: 5)\n  2806: sp = sp - 8\n  2809: u64 [sp] = ra\n  2811: a0 = 0x0\n  2813: a1 = 0x0\n  2815: ra = 80, jump @0\n      : @114 [@dyn 40] (gas: 1)\n  2820: jump @116 if a0 != 0\n      : @115 (gas: 1)\n  2823: trap\n      : @116 (gas: 7)\n  2824: a1 = 0x20008\n  2829: i32 a1 = a1 + 0x0\n  2831: a0 = 0x1\n  2834: a2 = 0x0\n  2836: ra = 0x52\n  2839: ecalli 4 // 'seal_return'\n  2841: fallthrough\n      : @117 [@dyn 41] (gas: 9)\n  2842: a2 = u64 [a1 + 24]\n  2845: a3 = u64 [a1 + 16]\n  2848: a4 = u64 [a1 + 8]\n  2851: a1 = u64 [a1]\n  2853: u64 [a0 + 24] = a2\n  2856: u64 [a0 + 16] = a3\n  2859: u64 [a0 + 8] = a4\n  2862: u64 [a0] = a1\n  2864: ret\n      : @118 [export #0: 'call'] (gas: 2)\n  2866: a0 = 0x0\n  2868: ra = 84, jump @8\n      : @119 [@dyn 42] [export #1: 'deploy'] (gas: 2)\n  2873: a0 = 0x1\n  2876: ra = 86, jump @8\n      : @120 [@dyn 43] (gas: 1)\n  2881: jump @113\n",
            "bytecode": {
              "object": "50564d0000c50d000000000000010700c14000c0004004808f08000000000e0000001c0000002a0000003500000040000000520000005d00000063616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a656765745f73746f726167657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e736665727265640511028b320463616c6c8b39066465706c6f79068d062b028b435d0076007b009f002e01cf010a023802540266028002f102f60224033903210463048e04b704c90404055e058b05e80516063e0682079407d607f1075a08a5087e099e09ca09e5098d0ad30af60a040b1a0b390b410b64798b7a103307520a41330a000001ac8a39c8980883871f8477e054370000010a330732003908000002ae78143d0700000264783307200002c8870732003307200002c88707320032009511f07b10087b1584750133073308501002a73e070800020a02013e071000023b0520000351050750100409501006f0019511e0fe7b1018017b1510017b160801951520018411e0641633074033082050100866ff5107b8013308080002210358000221035000022103480002140700000000000000807b68303e076000029517e08477e07b67386471491718491710491708490783770a0701826a3882a71082a81882a90882aad49808d4a707d487075207500195674033000a951170ff7b1088007b1580007b1678951590008411f039061000027b1733074033082033002e28d5fe8267407b67388267487b67288267507b67208267587b67184926d8004926d0004926c8004926c0004926b8004926b0004926a8004926a0004926900049269800492688004926800000018368c000836aa000836b80003309ff33070a034926f8004926f0004926e8004926e0008267187b67788267207b67708267287b67688267387b67608368e000836a603309ff330b2033070a0633074033082050100c36fe51078800826a3082a74882a85882a94082aa506f7b6f87d4b708d4a9096f99d49808988820d4b909979920d4980852085a83777b673850100efbfd51074d826730826838be8707330833090a01390814000251080d330740000383770a05018267383308501010cdfd51071f826730826838be7808330733090a040133073308501012b1fd5207040081683033070133093300140a04019511c07b10387b15309515408411e033074033082050101685fd52070400210358000221035000023908100002140900000000000000803e0960000221034800025418034a831733080a010181171c5147cb9cce09415247cbc1b53f35330018951100ff7b10f8007b15f0007b16e800951500018411e04911384911304911284911208317200a0728b20650101a050833001c951120ff7b10d8007b15d0007b16c8009515e0008411e04911584911504911484911408317400a07288b049511f07b10087b15647533074033082050101eccfc5107343a086000023a095800023a0a5000023a074800026f886f996faa6f777b57187b5a107b59087b5882100882159511103200009511d87b10207b15187b16108273188274108279088270828c828218828508828a1095c61fd8c60bc8b507d85705dabb05c85a08d8a80a8466e07b1008c86000d86006c8970bc86b0cd37c0bd87c05dab605c8480bc8b505d8b506d88b07c83202c8a208c88707c876068e678e58db6708d465078ecbdb780b520b72821708d87007d39c08d89c09da8709d84507d33608d8360ada870ad34507d48707da790a520a4b7b1c7b1008330740330820501020e4fb510799006f6733080800026f59821a6faa821b086fbb3e0b6000023e0a5800023e095000023e0748000282102082151882161095112832003308203307501022a2fb510757330508000221032000022103180002210310000221030800024e487b7133070433082050102477fb51072c4815200000004148151c48151848151448151048150c48150848150433082433075010264efb5207040083583307013309243300280a0401951160ff7b1098007b1590007b1688009515a0008411f08289187b19388289107b19208289087b192882887b1830647633074033082050102a01fb510786003a086000023a095800023a0a5000023a074800026f887b18186f997b19106faa7b1a086f7b7b1b8217207b17508217287b17488217307b17407b1b787b1a707b19687b18609517609518408219387b195850102c15fe82177b67188217087b67108217107b67088217187b67955160ff8210980082159000821688009511a0003200005107fa01330b0800027b16289767209877203a086000023a095800023a0a5000027b1b203a0b4800026f8c7b1c086f987b18106fa66fb97b19184911484911404911387b17307b19687b16607b18589517509518307b1c505010308bfd821908821718821810d48707d46908d47808988820d46707977720d4870752077f0183966467821828501032eff951076f018217207b1618be6707821628646833090a0154161f4d013308208216186467501034c7f951074701821720c876067c67017c687c69027c6a03977708d4870797991097aa18d4a909d497077c68057c69047c6a067c6b07978808d4980897aa1097bb18d4ba0ad4a808978820d478027c68097c69087c6a0a7c6b0b978808d4980897aa1097bb18d4ba0ad4a8087c690d7c6a0c7c6b0e7c6c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d498087c69117c6a107c6b127c6c13979908d4a90997bb1097cc18d4cb0bd4b9097c6a157c6b147c6c167c671797aa08d4ba0a97cc10977718d4c707d4a707977720d479097c67197c6a187c6b1a7c6c1b977708d4a70797bb1097cc18d4cb0bd4b7077c6a1d7c6b1c7c6c1e7c661f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a7076f776f996f886f2a821b7bba187bb8107bb9087bb7955170ff82108800821580008216789511900032003307330850103683f85207040081182033070133093300380a0401828918828a10828b0882887b79187b7a107b7b087b783200821750821858821948821a40d49808d4a707d4870752072739071000025617032d3307330850103a2ff851071f3308080002838833070133090a04013307330850103c14f852079b01004921b8004921b0004921a8004921a0004921980049219000492188004921800049117049117849116849116000018318a000831a8000831b603309ff33070a03821798007b1728821790007b1730821788007b17388216800033074033082050103eabf751079b7b162033060800023a075000023a086000023a094800023a0a5800026f7b6f87d4b708d4a9096f99d49808988820d4b909979920d49808520861ff83773308207b171850104060f7510750ff821718c876068218286f8c8218306f888219386f99821a206faa786a1898ab38786b1f98ab30786b1e98ab28786b1d98ab20786b1c98ab18786b1b98ab10786b1a98aa08786a19786910989a38786a17989a30786a16989a28786a15989a20786a14989a18786a13989a10786a1298990878691178680898893878690f98893078690e98892878690d98892078690c98891878690b98891078690a988808786809786c98c83878680798c83078680698c82878680598c82078680498c81878680398c81078680298cc08786c0133082050104287f6510777fe836833092033070a04013308080002838833070133093300440a04013200821730821838821928821a20d49808d4a707d4870752072739071000025617232d330733085010463bf651071f3308080002838833070133090a04013307330850104820f65207ff00008317c0003308040a018217c0007b17188217c8007b17108217d0007b17088216d8004921b8004921b0004921a8004921a0004921980049219000492188004921800049117049117849116849116000018318a000831a8000831b603309ff33070a034921d8004921d0004921c8004921c0007b16588217087b17508217107b17488217187b17408318c000831a403309ff330b2033070a0633074033082050104a78f551075cff33060800023a075000023a086000023a094800023a0a5800026f7b6f87d4b708d4a9096f99d49808988820d4b909979920d49808520824ff83777b171850104c32f5510716ff821818be6808330733090a040133080800028388330701330933004e0a04019511f87b103307330850105001f5520704003308080002838833070133093300520a0401828918828a10828b0882887b79187b7a107b7b087b783200330750105416f53307015010560ef528b5a58424092a2414524825a522348444888888948408218400129294a49a24258924221209254992244944444444440411918a88489224892495844892545292242524491d126a0a4952ad9049699224091942082084a8261048444424495242222222499292541212420855494a699224a924499224499224499224959424499224494a12a250a5104248925248082104484202499224852c4923222249929492102184504aa924499224494249921411118d90248490504a254992240949922449544224491d924224294992244992244992244992244992244992244992244992244992244992244992aa921411892a64529aa42495244912a24242a91562444444449210915424128924242184102a29491225219294524a9224499224499224499224499224499294244992244942941a4a69499224212a24945a21468a44221111111191244424151191244922492521420821545292244a88a41a4a69aa90a19426294915120200"
            },
            "deployedBytecode": {
              "object": "50564d0000c50d000000000000010700c14000c0004004808f08000000000e0000001c0000002a0000003500000040000000520000005d00000063616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a656765745f73746f726167657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e736665727265640511028b320463616c6c8b39066465706c6f79068d062b028b435d0076007b009f002e01cf010a023802540266028002f102f60224033903210463048e04b704c90404055e058b05e80516063e0682079407d607f1075a08a5087e099e09ca09e5098d0ad30af60a040b1a0b390b410b64798b7a103307520a41330a000001ac8a39c8980883871f8477e054370000010a330732003908000002ae78143d0700000264783307200002c8870732003307200002c88707320032009511f07b10087b1584750133073308501002a73e070800020a02013e071000023b0520000351050750100409501006f0019511e0fe7b1018017b1510017b160801951520018411e0641633074033082050100866ff5107b8013308080002210358000221035000022103480002140700000000000000807b68303e076000029517e08477e07b67386471491718491710491708490783770a0701826a3882a71082a81882a90882aad49808d4a707d487075207500195674033000a951170ff7b1088007b1580007b1678951590008411f039061000027b1733074033082033002e28d5fe8267407b67388267487b67288267507b67208267587b67184926d8004926d0004926c8004926c0004926b8004926b0004926a8004926a0004926900049269800492688004926800000018368c000836aa000836b80003309ff33070a034926f8004926f0004926e8004926e0008267187b67788267207b67708267287b67688267387b67608368e000836a603309ff330b2033070a0633074033082050100c36fe51078800826a3082a74882a85882a94082aa506f7b6f87d4b708d4a9096f99d49808988820d4b909979920d4980852085a83777b673850100efbfd51074d826730826838be8707330833090a01390814000251080d330740000383770a05018267383308501010cdfd51071f826730826838be7808330733090a040133073308501012b1fd5207040081683033070133093300140a04019511c07b10387b15309515408411e033074033082050101685fd52070400210358000221035000023908100002140900000000000000803e0960000221034800025418034a831733080a010181171c5147cb9cce09415247cbc1b53f35330018951100ff7b10f8007b15f0007b16e800951500018411e04911384911304911284911208317200a0728b20650101a050833001c951120ff7b10d8007b15d0007b16c8009515e0008411e04911584911504911484911408317400a07288b049511f07b10087b15647533074033082050101eccfc5107343a086000023a095800023a0a5000023a074800026f886f996faa6f777b57187b5a107b59087b5882100882159511103200009511d87b10207b15187b16108273188274108279088270828c828218828508828a1095c61fd8c60bc8b507d85705dabb05c85a08d8a80a8466e07b1008c86000d86006c8970bc86b0cd37c0bd87c05dab605c8480bc8b505d8b506d88b07c83202c8a208c88707c876068e678e58db6708d465078ecbdb780b520b72821708d87007d39c08d89c09da8709d84507d33608d8360ada870ad34507d48707da790a520a4b7b1c7b1008330740330820501020e4fb510799006f6733080800026f59821a6faa821b086fbb3e0b6000023e0a5800023e095000023e0748000282102082151882161095112832003308203307501022a2fb510757330508000221032000022103180002210310000221030800024e487b7133070433082050102477fb51072c4815200000004148151c48151848151448151048150c48150848150433082433075010264efb5207040083583307013309243300280a0401951160ff7b1098007b1590007b1688009515a0008411f08289187b19388289107b19208289087b192882887b1830647633074033082050102a01fb510786003a086000023a095800023a0a5000023a074800026f887b18186f997b19106faa7b1a086f7b7b1b8217207b17508217287b17488217307b17407b1b787b1a707b19687b18609517609518408219387b195850102c15fe82177b67188217087b67108217107b67088217187b67955160ff8210980082159000821688009511a0003200005107fa01330b0800027b16289767209877203a086000023a095800023a0a5000027b1b203a0b4800026f8c7b1c086f987b18106fa66fb97b19184911484911404911387b17307b19687b16607b18589517509518307b1c505010308bfd821908821718821810d48707d46908d47808988820d46707977720d4870752077f0183966467821828501032eff951076f018217207b1618be6707821628646833090a0154161f4d013308208216186467501034c7f951074701821720c876067c67017c687c69027c6a03977708d4870797991097aa18d4a909d497077c68057c69047c6a067c6b07978808d4980897aa1097bb18d4ba0ad4a808978820d478027c68097c69087c6a0a7c6b0b978808d4980897aa1097bb18d4ba0ad4a8087c690d7c6a0c7c6b0e7c6c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d498087c69117c6a107c6b127c6c13979908d4a90997bb1097cc18d4cb0bd4b9097c6a157c6b147c6c167c671797aa08d4ba0a97cc10977718d4c707d4a707977720d479097c67197c6a187c6b1a7c6c1b977708d4a70797bb1097cc18d4cb0bd4b7077c6a1d7c6b1c7c6c1e7c661f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a7076f776f996f886f2a821b7bba187bb8107bb9087bb7955170ff82108800821580008216789511900032003307330850103683f85207040081182033070133093300380a0401828918828a10828b0882887b79187b7a107b7b087b783200821750821858821948821a40d49808d4a707d4870752072739071000025617032d3307330850103a2ff851071f3308080002838833070133090a04013307330850103c14f852079b01004921b8004921b0004921a8004921a0004921980049219000492188004921800049117049117849116849116000018318a000831a8000831b603309ff33070a03821798007b1728821790007b1730821788007b17388216800033074033082050103eabf751079b7b162033060800023a075000023a086000023a094800023a0a5800026f7b6f87d4b708d4a9096f99d49808988820d4b909979920d49808520861ff83773308207b171850104060f7510750ff821718c876068218286f8c8218306f888219386f99821a206faa786a1898ab38786b1f98ab30786b1e98ab28786b1d98ab20786b1c98ab18786b1b98ab10786b1a98aa08786a19786910989a38786a17989a30786a16989a28786a15989a20786a14989a18786a13989a10786a1298990878691178680898893878690f98893078690e98892878690d98892078690c98891878690b98891078690a988808786809786c98c83878680798c83078680698c82878680598c82078680498c81878680398c81078680298cc08786c0133082050104287f6510777fe836833092033070a04013308080002838833070133093300440a04013200821730821838821928821a20d49808d4a707d4870752072739071000025617232d330733085010463bf651071f3308080002838833070133090a04013307330850104820f65207ff00008317c0003308040a018217c0007b17188217c8007b17108217d0007b17088216d8004921b8004921b0004921a8004921a0004921980049219000492188004921800049117049117849116849116000018318a000831a8000831b603309ff33070a034921d8004921d0004921c8004921c0007b16588217087b17508217107b17488217187b17408318c000831a403309ff330b2033070a0633074033082050104a78f551075cff33060800023a075000023a086000023a094800023a0a5800026f7b6f87d4b708d4a9096f99d49808988820d4b909979920d49808520824ff83777b171850104c32f5510716ff821818be6808330733090a040133080800028388330701330933004e0a04019511f87b103307330850105001f5520704003308080002838833070133093300520a0401828918828a10828b0882887b79187b7a107b7b087b783200330750105416f53307015010560ef528b5a58424092a2414524825a522348444888888948408218400129294a49a24258924221209254992244944444444440411918a88489224892495844892545292242524491d126a0a4952ad9049699224091942082084a8261048444424495242222222499292541212420855494a699224a924499224499224499224959424499224494a12a250a5104248925248082104484202499224852c4923222249929492102184504aa924499224494249921411118d90248490504a254992240949922449544224491d924224294992244992244992244992244992244992244992244992244992244992244992aa921411892a64529aa42495244912a24242a91562444444449210915424128924242184102a29491225219294524a9224499224499224499224499224499294244992244942941a4a69499224212a24945a21468a44221111111191244424151191244922492521420821545292244a88a41a4a69aa90a19426294915120200"
            },
            "methodIdentifiers": {
              "setNumber(uint256)": "3fb5c1cb",
              "storedNumber()": "09ce9ccb"
            }
          },
          "irOptimized": "/// @use-src 0:\"contracts/Storage.sol\"\nobject \"Storage_24\" {\n    code {\n        {\n            /// @src 0:57:292  \"contract Storage {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_Storage()\n            constructor_Storage(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"Storage_24_deployed\"), datasize(\"Storage_24_deployed\"))\n            return(_2, datasize(\"Storage_24_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function validator_revert_uint256(value)\n        {\n            if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n        }\n        function abi_decode_t_uint256_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_uint256(value)\n        }\n        function abi_decode_uint256_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_Storage() -> ret_param\n        {\n            let programSize := datasize(\"Storage_24\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint256_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_uint256(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_uint256_to_uint256(slot, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        /// @ast-id 13 @src 0:114:196  \"constructor(uint256 _initialNumber) {...\"\n        function constructor_Storage(var_initialNumber)\n        {\n            /// @src 0:175:189  \"_initialNumber\"\n            let _1 := var_initialNumber\n            let expr := _1\n            /// @src 0:160:189  \"storedNumber = _initialNumber\"\n            update_storage_value_offset_uint256_to_uint256(0x00, expr)\n        }\n    }\n    /// @use-src 0:\"contracts/Storage.sol\"\n    object \"Storage_24_deployed\" {\n        code {\n            {\n                /// @src 0:57:292  \"contract Storage {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x09ce9ccb { external_fun_storedNumber() }\n                    case 0x3fb5c1cb { external_fun_setNumber() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 3 @src 0:80:107  \"uint256 public storedNumber\"\n            function getter_fun_storedNumber() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:57:292  \"contract Storage {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_storedNumber()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_storedNumber()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_setNumber()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_setNumber(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @ast-id 23 @src 0:202:290  \"function setNumber(uint256 _newNumber) public {...\"\n            function fun_setNumber(var_newNumber)\n            {\n                /// @src 0:273:283  \"_newNumber\"\n                let _1 := var_newNumber\n                let expr := _1\n                /// @src 0:258:283  \"storedNumber = _newNumber\"\n                update_storage_value_offset_uint256_to_uint256(0x00, expr)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122075dc6359921e1499d9f985a7254d0a89d23879b28ab1652eafda27c5964704b364736f6c634300081c0033\"\n    }\n}\n",
          "hash": "da9dc46499186bfe991de50e78f21c8c8853dc7d9d3094fcffbb7e8f03e89b3b",
          "factoryDependencies": {}
        }
      }
    }
  }
}